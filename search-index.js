var N=null,E="",T="t",U="u",searchIndex={};
var R=["rubble","beacon","deviceaddress","instant","result","error","into_rest","Consumes `self` and returns the part of the contained…","usize","split_off","channeldata","producer","channel","rubble::link","rubble::link::RadioCmd","rubble::link::ad_structure","rubble::link::ad_structure::AdStructure","is_empty","broadcast","rubble::link::advertising","advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.","advertising_data","AD structures sent along with the advertisement.","initiator_addr","Unknown","bytereader","option","access_address","crc_init","duration","discoverable","pdutype","from_raw","DataCont","DataStart","rubble::link::data","rubble::link::data::Pdu","rubble::link::data::ControlPdu","ConnectionUpdateReq","ChannelMapReq","TerminateInd","UnknownRsp","FeatureReq","FeatureRsp","VersionInd","Returns the raw representation of the header.","payload_length","Returns the length of the payload in octets as specified…","set_payload_length","header","interval","Returns the connection supervision timeout…","addresskind","Returns an empty set of flags.","Returns the set containing all flags.","featureset","Returns the raw value of the flags currently stored.","from_bits","Convert from underlying bit representation, unless that…","from_bits_truncate","Convert from underlying bit representation, dropping any…","Returns `true` if no flags are currently stored.","Returns `true` if all flags are currently set.","intersects","Returns `true` if there are flags common to both `self`…","contains","Returns `true` all of the flags in `other` are contained…","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the…","consumer","nextupdate","process_adv_packet","rf_channel","Returns the center frequency of this channel in MHz.","whitening_iv","Calculates the initial value of the LFSR to use for data…","datachannel","bondingtype","keydistribution","rubble::att","try_from","try_into","borrow_mut","type_id","borrow","typeid","rubble::beacon","rubble::bytes","rubble::gatt","rubble::l2cap","rubble::link::filter","rubble::link::queue","rubble::phy","rubble::security_manager","rubble::time","rubble::uuid","formatter","ordering","attributes","bytewriter","to_bytes","from_bytes","process_message","l2capresponder","tx_payload_buf","transmit_advertising","advertisingchannel","transmit_data","controlopcode","channelmap","versionnumber","partial_cmp","Returns the set difference of the two sets of flags.","add_assign","sub_assign","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags…","bitand_assign","Disables all flags disabled in the set.","bitor_assign","Adds the set of flags.","bitxor_assign","Toggles the set of flags.","from_iter","intoiterator","controlpdu","byteserror","from_slice","Creates a `Uuid` using the supplied big-endian bytes.","parseerror","Attribute","AccessPermission","EncryptionPermission","AuthenticationPermission","AuthorizationPermission","ErrorCode","AttHandle","Attributes","AttributeServer","ScanCallback","BeaconScanner","FromBytes","ByteWriter","ByteReader","ServiceType","GattServer","ChannelMapper","ProtocolObj","ChannelData","BleChannelMap","L2CAPState","L2CAPResponder","AddressKind","NextUpdate","AdStructure","ServiceUuids","SleepClockAccuracy","ConnectRequestData","CompanyId","ControlPdu","ControlOpcode","VersionNumber","ConnectionUpdateData","DeviceAddress","FeatureSet","AddressFilter","WhitelistFilter","AdvFilter","ScanFilter","Responder","HardwareInterface","Transmitter","LinkLayer","RawTransmitter","AdvertisingChannel","DataChannel","ChannelMap","IoCapabilities","BondingType","SecurityLevel","SecurityManager","KeyDistribution","AttPermission","NoAttributes","ByTypeAttData","ByGroupAttData","Characteristic","NoSecurity","SecureConnections","rubble_nrf52810","clear_interrupt","rubble_nrf52810::radio","rubble_nrf52810::timer","NrfTimerExt","StampSource"];
searchIndex[R[196]]={"doc":"A Rubble BLE driver for the nRF52810 radio.","i":[[0,"radio",R[196],"Integrated 2.4 GHz radio with BLE support.",N,N],[3,"BleRadio",R[198],"An interface to the nRF radio in BLE mode.",N,N],[6,"PacketBuffer",E,"A packet buffer that can hold header and payload of any…",N,N],[11,"new",E,"Initializes the radio in BLE mode and takes ownership of…",0,[[["radio"],["packetbuffer"]],["self"]]],[11,"state",E,"Returns the current radio state.",0,[[["self"]],["stater"]]],[11,"configure_receiver",E,"Configures the Radio for (not) receiving data according to…",0,[[["self"],["radiocmd"]]]],[11,"recv_interrupt",E,"Call this when the `RADIO` interrupt fires.",0,[[["self"],[R[3]],["linklayer"]],[R[74]]]],[0,"timer",R[196],"Generic `Timer` implementation that works with all 3…",N,N],[3,"BleTimer",R[199],"Implements Rubble's `Timer` trait for the timers on the…",N,N],[3,R[201],E,"A timer interface that only allows reading the current…",N,N],[8,R[200],E,"Extension trait implemented for the nRF timer peripherals.",N,N],[10,"duplicate",E,E,1,[[["self"]],["self"]]],[10,"init",E,"Initialize the timer so that it counts at a rate of 1 MHz.",1,[[["self"]]]],[10,"set_interrupt",E,"Configures the timer's interrupt to fire at the given…",1,[[["self"],[R[3]]]]],[10,R[197],E,"Disables or acknowledges this timer's interrupt.",1,[[["self"]]]],[10,"is_pending",E,"Returns whether a timer interrupt is currently pending.",1,[[["self"]],["bool"]]],[10,"now",E,"Obtains the current time as an `Instant`.",1,[[["self"]],[R[3]]]],[11,"init",E,"Initializes the timer.",2,[[[T]],["self"]]],[11,"configure_interrupt",E,"Configures the timer interrupt to fire according to `next`.",2,[[[R[74]],["self"]]]],[11,"is_interrupt_pending",E,"Checks whether this timer's interrupt is pending.",2,[[["self"]],["bool"]]],[11,R[197],E,"Clears a pending interrupt and disables generation of…",2,[[["self"]]]],[11,"inner",E,"Provides access to the raw peripheral. Use with caution.",2,[[["self"]],[T]]],[11,"create_stamp_source",E,"Creates a new `StampSource` using this timer.",2,[[["self"]],["stampsource"]]],[11,"from",R[198],E,0,[[[T]],[T]]],[11,R[84],E,E,0,[[[U]],[R[4]]]],[11,R[85],E,E,0,[[],[R[4]]]],[11,"into",E,E,0,[[],[U]]],[11,R[88],E,E,0,[[["self"]],[T]]],[11,R[86],E,E,0,[[["self"]],[T]]],[11,R[87],E,E,0,[[["self"]],[R[89]]]],[11,"from",R[199],E,2,[[[T]],[T]]],[11,R[84],E,E,2,[[[U]],[R[4]]]],[11,R[85],E,E,2,[[],[R[4]]]],[11,"into",E,E,2,[[],[U]]],[11,R[88],E,E,2,[[["self"]],[T]]],[11,R[86],E,E,2,[[["self"]],[T]]],[11,R[87],E,E,2,[[["self"]],[R[89]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[84],E,E,3,[[[U]],[R[4]]]],[11,R[85],E,E,3,[[],[R[4]]]],[11,"into",E,E,3,[[],[U]]],[11,R[88],E,E,3,[[["self"]],[T]]],[11,R[86],E,E,3,[[["self"]],[T]]],[11,R[87],E,E,3,[[["self"]],[R[89]]]],[11,R[108],R[198],E,0,[[["self"]]]],[11,R[109],E,E,0,[[[R[110]],["self"],[R[51]]]]],[11,R[111],E,E,0,[[["u32"],[R[51]],["self"],[R[80]]]]],[11,"now",R[199],E,2,[[["self"]],[R[3]]]],[11,"now",E,E,3,[[["self"]],[R[3]]]]],"p":[[3,"BleRadio"],[8,R[200]],[3,"BleTimer"],[3,R[201]]]};
searchIndex[R[0]]={"doc":"An experimental BLE stack.","i":[[4,"Error",R[0],"Errors returned by the BLE stack.",N,N],[13,"InvalidLength",E,"Packet specified an invalid length value or was too short.",0,N],[13,"InvalidValue",E,"Invalid value supplied for field.",0,N],[13,"Eof",E,"Unexpectedly reached EOF while reading or writing data.",0,N],[13,"IncompleteParse",E,"Parsing didn't consume the entire buffer.",0,N],[0,"att",E,"Implementation of the Attribute Protocol (ATT).",N,N],[3,R[143],R[83],"A 16-bit handle uniquely identifying an attribute on an…",N,N],[3,R[137],E,"An ATT server attribute",N,N],[12,"att_type",E,"The type of the attribute as a UUID16, EG \"Primary…",1,N],[12,"handle",E,"Unique server-side identifer for attribute",1,N],[12,"value",E,"Attribute values can be any fixed length or variable…",1,N],[12,"permission",E,"Permissions associated with the attribute",1,N],[3,R[189],E,"Permissions associated with an attribute",N,N],[3,R[190],E,"An empty attribute set.",N,N],[3,R[145],E,"An Attribute Protocol server providing read and write…",N,N],[3,"AttError",E,"An error on the ATT protocol layer. Can be sent as a…",N,N],[3,R[191],E,"Attribute Data returned in Read By Type response.",N,N],[3,R[192],E,"Attribute Data returned in Read By Group Type response.",N,N],[4,"AttUuid",E,"ATT protocol UUID (either a 16 or a 128-bit UUID).",N,N],[13,"Uuid16",E,E,2,N],[13,"Uuid128",E,E,2,N],[4,R[138],E,E,N,N],[13,"Readable",E,E,3,N],[13,"Writeable",E,E,3,N],[13,"ReadableWritable",E,E,3,N],[4,R[139],E,E,N,N],[13,"EncryptionRequired",E,E,4,N],[13,"EncryptionNotRequired",E,E,4,N],[4,R[140],E,E,N,N],[13,"AuthenticationRequired",E,E,5,N],[13,"AuthenticationNotRequired",E,E,5,N],[4,R[141],E,E,N,N],[13,"AuthorizationRequired",E,E,6,N],[13,"AuthorizationNotRequired",E,E,6,N],[4,R[142],E,"Error codes that can be sent from the ATT server to the…",N,N],[13,"InvalidHandle",E,"Attempted to use an `AttHandle` that isn't valid on this…",7,N],[13,"ReadNotPermitted",E,"Attribute isn't readable.",7,N],[13,"WriteNotPermitted",E,"Attribute isn't writable.",7,N],[13,"InvalidPdu",E,"Attribute PDU is invalid.",7,N],[13,"InsufficientAuthentication",E,"Authentication needed before attribute can be read/written.",7,N],[13,"RequestNotSupported",E,"Server doesn't support this operation.",7,N],[13,"InvalidOffset",E,"Offset was past the end of the attribute.",7,N],[13,"InsufficientAuthorization",E,"Authorization needed before attribute can be read/written.",7,N],[13,"PrepareQueueFull",E,"Too many \"prepare write\" requests have been queued.",7,N],[13,"AttributeNotFound",E,"No attribute found within the specified attribute handle…",7,N],[13,"AttributeNotLong",E,"Attribute can't be read/written using Read Key Blob request.",7,N],[13,"InsufficientEncryptionKeySize",E,"The encryption key in use is too weak to access an…",7,N],[13,"InvalidAttributeValueLength",E,"Attribute value has an incorrect length for the operation.",7,N],[13,"UnlikelyError",E,"Request has encountered an \"unlikely\" error and could not…",7,N],[13,"InsufficientEncryption",E,"Attribute cannot be read/written without an encrypted…",7,N],[13,"UnsupportedGroupType",E,"Attribute type is an invalid grouping attribute according…",7,N],[13,"InsufficientResources",E,"Server didn't have enough resources to complete a request.",7,N],[13,R[26],E,E,7,N],[18,"NULL",E,"The `0x0000` handle is not used for actual attributes, but…",8,N],[11,"as_u16",E,"Returns the raw 16-bit integer representing this handle.",8,[[["self"]],["u16"]]],[11,R[34],E,"Create an attribute handle from a raw u16",8,[[["u16"]],["self"]]],[8,R[144],E,"Trait for attribute sets that can be hosted by an…",N,N],[10,R[102],E,E,9,[[["self"]]]],[11,"new",E,"Creates an AttributeServer with Attributes",10,[[["a"]],["self"]]],[0,R[1],R[0],"BLE beacon support, without dealing with Link-Layer stuff.",N,N],[3,"Beacon",R[90],"A BLE beacon.",N,N],[3,R[147],E,"A passive scanner for non-connectable beacon advertisements.",N,N],[8,R[146],E,"Callback for the `BeaconScanner`.",N,N],[10,R[1],E,"Called when a beacon is received and has passed the…",11,[[["self"],["i"],[R[2]]]]],[11,"new",E,"Creates a new beacon that will broadcast a packet on all…",12,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[18],E,"Broadcasts the beacon data using `tx`.",12,[[[T],["self"]]]],[11,"new",E,"Creates a `BeaconScanner` that will report beacons from…",13,[[["c"]],["self"]]],[11,"with_filter",E,"Creates a `BeaconScanner` with a custom device filter.",13,[[["c"],["f"]],["self"]]],[11,"configure",E,"Configures the `BeaconScanner` and returns a `Cmd` to…",13,[[["self"],[R[31]],[R[3]]],["cmd"]]],[11,"timer_update",E,"Updates the `BeaconScanner` after the configured timer has…",13,[[["self"],[R[3]]],["cmd"]]],[11,R[75],E,"Processes a received advertising channel packet.",13,[[[R[51]],["self"],["bool"]],["cmd"]]],[0,"bytes",R[0],"Utilities for decoding from and encoding into bytes.",N,N],[3,"BytesOr",R[91],"Reference to a `T`, or to a byte slice that can be decoded…",N,N],[3,R[149],E,"Wrapper around a byte slice that can be used to encode…",N,N],[3,R[150],E,"Allows reading values from a borrowed byte slice.",N,N],[8,"ToBytes",E,"Trait for encoding a value into a byte buffer.",N,N],[10,R[104],E,"Converts `self` to bytes and writes them into `writer`,…",14,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[8,R[148],E,"Trait for decoding values from a byte slice.",N,N],[10,R[105],E,"Decode a `Self` from a byte slice, advancing `bytes` to…",15,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,"from_ref",E,"Creates a `BytesOr` that holds on to a `T` via reference.",16,[[[T]],["self"]]],[11,"read",E,"Reads the `T`, possibly by parsing the stored bytes.",16,[[["self"]],[T]]],[11,"iter",E,"Returns an iterator over all `T`s stored in `self` (which…",16,[[["self"]]]],[11,"iter",E,"Returns an iterator over all `T`s stored in `self`.",16,[[["self"]]]],[11,"new",E,"Creates a writer that will write to `buf`.",17,[[],["self"]]],[11,R[6],E,R[7],17,[[]]],[11,"rest",E,"Returns the raw buffer this `ByteWriter` would write to.",17,[[["self"]]]],[11,"skip",E,"Skips the given number of bytes in the output data without…",17,[[["self"],[R[8]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[9],E,"Creates and returns another `ByteWriter` that can write to…",17,[[["self"],[R[8]]],[[R[4],[R[5]]],[R[5]]]]],[11,"split_next_mut",E,"Splits off the next byte in the buffer.",17,[[["self"]],[["u8"],[R[28],["u8"]]]]],[11,"space_left",E,"Returns the number of bytes that can be written to `self`…",17,[[["self"]],[R[8]]]],[11,"write_slice",E,"Writes all bytes from `other` to `self`.",17,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"write_u8",E,"Writes a single byte to `self`.",17,[[["self"],["u8"]],[[R[4],[R[5]]],[R[5]]]]],[11,"write_u16_le",E,"Writes a `u16` to `self`, using Little Endian byte order.",17,[[["self"],["u16"]],[[R[4],[R[5]]],[R[5]]]]],[11,"write_u32_le",E,"Writes a `u32` to `self`, using Little Endian byte order.",17,[[["u32"],["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"write_u64_le",E,"Writes a `u64` to `self`, using Little Endian byte order.",17,[[["self"],["u64"]],[[R[4],[R[5]]],[R[5]]]]],[11,"new",E,"Creates a new `ByteReader` that will read from the given…",18,[[],["self"]]],[11,"as_raw_bytes",E,"Returns a reference to the raw bytes in `self`, without…",18,[[["self"]]]],[11,R[6],E,R[7],18,[[]]],[11,"skip",E,"Skips the given number of bytes in the input data without…",18,[[["self"],[R[8]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[9],E,"Creates and returns another `ByteReader` that will read…",18,[[["self"],[R[8]]],[[R[4],[R[5]]],[R[5]]]]],[11,"bytes_left",E,"Returns the number of bytes that can still be read from…",18,[[["self"]],[R[8]]]],[11,R[17],E,"Returns whether `self` is at the end of the underlying…",18,[[["self"]],["bool"]]],[11,"read_slice",E,"Reads a byte slice of length `len` from `self`.",18,[[["self"],[R[8]]],[[R[4],[R[5]]],[R[5]]]]],[11,"read_array",E,"Reads a byte-array-like type `S` from `self`.",18,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"read_rest",E,"Reads the remaining bytes from `self`.",18,[[["self"]]]],[11,"read_u8",E,"Reads a single byte from `self`.",18,[[["self"]],[["u8"],[R[4],["u8",R[5]]],[R[5]]]]],[11,"read_u16_le",E,"Reads a `u16` from `self`, using Little Endian byte order.",18,[[["self"]],[[R[4],["u16",R[5]]],["u16"],[R[5]]]]],[11,"read_u32_le",E,"Reads a `u32` from `self`, using Little Endian byte order.",18,[[["self"]],[["u32"],[R[4],["u32",R[5]]],[R[5]]]]],[11,"read_u64_le",E,"Reads a `u64` from `self`, using Little Endian byte order.",18,[[["self"]],[[R[4],["u64",R[5]]],["u64"],[R[5]]]]],[0,"gatt",R[0],"Implementation of the Generic Attribute Profile (GATT).",N,N],[3,"Service",R[92],"A collection of data and associated behaviors to…",N,N],[3,R[193],E,"A characteristic is a value used in a service along with…",N,N],[3,R[152],E,"A GATT server to run on top of an ATT server",N,N],[4,R[151],E,E,N,N],[13,"Primary",E,E,19,N],[13,"Secondary",E,E,19,N],[11,"as_attributes",E,E,20,[[["self"]]]],[11,"new",E,E,21,[[],["self"]]],[0,"l2cap",R[0],"The Logical Link Control and Adaptation Protocol (L2CAP).",N,N],[3,"Channel",R[93],"An L2CAP channel identifier (CID).",N,N],[3,R[155],E,"Data associated with a connected L2CAP channel.",N,N],[3,R[156],E,"A fixed BLE channel map that provides only the required…",N,N],[3,R[157],E,"L2CAP channel manager and responder.",N,N],[3,R[158],E,E,N,N],[8,R[153],E,"Trait for L2CAP channel mappers that provide access to the…",N,N],[10,"lookup",E,"Look up what's connected to `channel` (eg. the `Protocol`…",22,[[["self"],[R[12]]],[[R[10]],[R[28],[R[10]]]]]],[8,R[154],E,"Trait for protocols that sit on top of L2CAP (object-safe…",N,N],[10,R[106],E,"Process a message sent to the protocol.",23,[[["self"],[R[107]]],[[R[4],[R[5]]],[R[5]]]]],[8,"Protocol",E,"Trait for protocols that sit on top of L2CAP…",N,N],[18,"RSP_PDU_SIZE",E,"Minimum size needed by PDUs sent by this protocol.",24,N],[18,"NULL",E,"The null channel identifier. Must not be used as a…",25,N],[18,"ATT",E,"The channel used by the Attribute Protocol (ATT).",25,N],[18,"LE_SIGNALING",E,"LE L2CAP signaling channel (connectionless).",25,N],[18,"LE_SECURITY_MANAGER",E,"LE Security Manager channel.",25,N],[11,"as_raw",E,"Returns the channel identifier (CID) as a raw `u16`.",25,[[["self"]],["u16"]]],[11,"is_connection_oriented",E,"Returns whether this channel is connection-oriented.",25,[[["self"]],["bool"]]],[11,"is_connectionless",E,"Returns whether this channel is connectionless.",25,[[["self"]],["bool"]]],[11,"response_channel",E,"Returns the `Channel` to which the response should be sent.",26,[[["self"]],[R[12]]]],[11,"response_pdu_size",E,"Returns the protocol response size in Bytes.",26,[[["self"]],["u8"]]],[11,"protocol",E,"Returns the protocol connected to the channel.",26,[[["self"]],["protocolobj"]]],[11,"empty",E,"Creates a new channel map with no backing data for the…",27,[[],["self"]]],[11,"with_attributes",E,E,27,[[["a"]],["self"]]],[11,"new",E,E,28,[[["m"]],["self"]]],[11,"process_start",E,"Process the start of a new L2CAP message (or a complete,…",28,[[["self"],[R[11]]],["consume"]]],[11,"process_cont",E,"Process continuation of an L2CAP message.",28,[[["self"],[R[11]]],["consume"]]],[11,"respond",E,"Enqueues an L2CAP message to be sent over the data…",29,[[["tobytes"],["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"respond_with",E,"Respond with an L2CAP message encoded by a closure.",29,[[["self"]],[R[4]]]],[0,"link",R[0],"Link-Layer.",N,N],[3,R[165],R[13],"Company identifier for use in link layer Control PDUs.",N,N],[3,R[170],E,"A Bluetooth device address.",N,N],[3,R[171],E,"A set of optional Link Layer features.",N,N],[3,R[176],E,"Data channel packet processor.",N,N],[3,R[179],E,"Implementation of the real-time BLE Link-Layer logic.",N,N],[3,"Cmd",E,"Command returned by the Link-Layer to the user.",N,N],[12,"radio",E,"Radio configuration request.",30,N],[12,"next_update",E,"Time until `LinkLayer::update` should be called.",30,N],[3,R[180],E,"A `Transmitter` that lowers Link-Layer packets to raw byte…",N,N],[4,R[159],E,"Specifies whether a device address is randomly generated…",N,N],[13,"Public",E,"Publicly registered IEEE 802-2001 LAN MAC address.",31,N],[13,"Random",E,"Randomly generated address.",31,N],[4,R[160],E,"Specifies when the Link Layer's `update` method should be…",N,N],[13,"Disable",E,"Disable timer and do not call `update`.",32,N],[13,"Keep",E,"Keep the previously configured time.",32,N],[13,"At",E,"Call `update` at the given `Instant`.",32,N],[4,"RadioCmd",E,"Specifies if and how the radio should listen for…",N,N],[13,"Off",E,"Turn the radio off and don't call `LinkLayer::process_*`…",33,N],[13,"ListenAdvertising",E,"Listen on an advertising channel. If a packet is received,…",33,N],[12,R[12],R[14],"The advertising channel to listen on.",33,N],[13,"ListenData",R[13],"Listen on a data channel. If a matching packet is…",33,N],[12,R[12],R[14],"The data channel to listen on.",33,N],[12,R[29],E,"The Access Address to listen for.",33,N],[12,R[30],E,"Initialization value of the CRC-24 calculation.",33,N],[0,"ad_structure",R[13],"Advertising Data / Extended Inquiry Response (EIR) data.",N,N],[3,R[162],R[15],"List of service UUIDs offered by the device.",N,N],[3,"Flags",E,"BR/EDR and LE compatibility flags.",N,N],[4,R[161],E,"A list of AD structures can be sent along with an…",N,N],[13,"Flags",E,"Device flags and baseband capabilities.",34,N],[13,"ServiceUuids16",E,E,34,N],[13,"ServiceUuids32",E,E,34,N],[13,"ServiceUuids128",E,E,34,N],[13,"ServiceData16",E,"Service data with 16-bit service UUID.",34,N],[12,"uuid",R[16],"The 16-bit service UUID.",34,N],[12,"data",E,"The associated service data. May be empty.",34,N],[13,"CompleteLocalName",R[15],"Sets the full (unabbreviated) device name.",34,N],[13,"ShortenedLocalName",E,"Sets the shortened device name.",34,N],[13,R[26],E,"An unknown or unimplemented AD structure stored as raw…",34,N],[12,"ty",R[16],"Type byte.",34,N],[12,"data",E,"Raw data transmitted after the type.",34,N],[11,"from_uuids",R[15],"Creates a `ServiceUuids` container from a list of UUIDs.",35,[[["bool"]],["self"]]],[11,"is_complete",E,"Returns a boolean indicating whether this list is complete.",35,[[["self"]],["bool"]]],[11,"iter",E,"Returns an iterator over the UUIDs stored in `self`.",35,[[["self"]]]],[18,"LE_LIMITED_DISCOVERABLE",E,E,36,N],[18,"LE_GENERAL_DISCOVERABLE",E,E,36,N],[18,"BR_EDR_NOT_SUPPORTED",E,E,36,N],[18,"SIMUL_LE_BR_CONTROLLER",E,E,36,N],[18,"SIMUL_LE_BR_HOST",E,E,36,N],[11,"empty",E,R[55],36,[[],["flags"]]],[11,"all",E,R[56],36,[[],["flags"]]],[11,"bits",E,R[58],36,[[["self"]],["u8"]]],[11,R[59],E,R[60],36,[[["u8"]],[[R[28],["flags"]],["flags"]]]],[11,R[61],E,R[62],36,[[["u8"]],["flags"]]],[11,R[17],E,R[63],36,[[["self"]],["bool"]]],[11,"is_all",E,R[64],36,[[["self"]],["bool"]]],[11,R[65],E,R[66],36,[[["self"],["flags"]],["bool"]]],[11,R[67],E,R[68],36,[[["self"],["flags"]],["bool"]]],[11,"insert",E,R[69],36,[[["self"],["flags"]]]],[11,"remove",E,R[70],36,[[["self"],["flags"]]]],[11,"toggle",E,R[71],36,[[["self"],["flags"]]]],[11,"set",E,R[72],36,[[["self"],["bool"],["flags"]]]],[11,R[32],E,"Returns flags suitable for discoverable devices that want…",36,[[],["flags"]]],[11,R[18],E,"Returns flags suitable for non-connectable devices that…",36,[[],["flags"]]],[11,"to_u8",E,"Returns the raw representation of the flags.",36,[[],["u8"]]],[11,"supports_classic_bluetooth",E,"Returns a boolean indicating whether the device that sent…",36,[[["self"]],["bool"]]],[11,"le_limited_discoverable",E,"Device operating in LE Limited Discoverable mode.",36,[[["self"]],["bool"]]],[11,"le_general_discoverable",E,"Device operating in LE General Discoverable mode.",36,[[["self"]],["bool"]]],[0,"advertising",R[13],"Advertising channel operations.",N,N],[3,R[164],R[19],"Connection parameters sent along with a `ConnectRequest`…",N,N],[3,"PduBuf",E,"Stores an advertising channel PDU.",N,N],[3,"Header",E,"16-bit Advertising Channel PDU header preceding the Payload.",N,N],[4,"Pdu",E,"A parsed advertising channel PDU.",N,N],[13,"ConnectableUndirected",E,"Connectable and scannable advertisement.",37,N],[12,R[20],R[21],R[22],37,N],[12,R[23],E,R[24],37,N],[13,"ConnectableDirected",R[19],"Directed connectable advertisement sent to an initiator.",37,N],[12,R[20],R[21],R[22],37,N],[12,R[25],E,"Intended receiver of the advertisement.",37,N],[13,"NonconnectableUndirected",R[19],"A non-connectable undirected advertisement (aka \"beacon\").",37,N],[12,R[20],R[21],"Address of the advertising device (beacon) that is sending…",37,N],[12,R[23],E,R[24],37,N],[13,"ScannableUndirected",R[19],"Scannable advertisement.",37,N],[12,R[20],R[21],R[22],37,N],[12,R[23],E,R[24],37,N],[13,"ScanRequest",R[19],"Scan request sent from a scanner to an advertising device.",37,N],[12,"scanner_addr",R[21],"Address of the scanning device sending this PDU.",37,N],[12,R[20],E,"Address of the advertising device that should be scanned.",37,N],[13,"ScanResponse",R[19],"Response to a scan request, sent by the scanned…",37,N],[12,R[20],R[21],"Address of the advertising device that responds to a scan…",37,N],[12,"scan_data",E,"Scan data payload, consisting of additional user-defined…",37,N],[13,"ConnectRequest",R[19],"A request to establish a connection, sent by an initiating…",37,N],[12,R[25],R[21],"Address of the device initiating the connection by sending…",37,N],[12,R[20],E,"Address of the intended receiver of this packet.",37,N],[12,"lldata",E,"Connection parameters.",37,N],[4,R[163],R[19],"Indicates the master's sleep clock accuracy (SCA) in ppm…",N,N],[13,"Ppm251To500",E,E,38,N],[13,"Ppm151To250",E,E,38,N],[13,"Ppm101To150",E,E,38,N],[13,"Ppm76To100",E,E,38,N],[13,"Ppm51To75",E,E,38,N],[13,"Ppm31To50",E,E,38,N],[13,"Ppm21To30",E,E,38,N],[13,"Ppm0To20",E,E,38,N],[4,"PduType",E,"4-bit PDU type in [`Header`].",N,N],[13,"AdvInd",E,"Connectable undirected advertising event (`ADV_IND`).",39,N],[13,"AdvDirectInd",E,"Connectable directed advertising event (`ADV_DIRECT_IND`).",39,N],[13,"AdvNonconnInd",E,"Non-connectable undirected advertising event…",39,N],[13,"AdvScanInd",E,"Scannable undirected advertising event (`ADV_SCAN_IND`).",39,N],[13,"ScanReq",E,"Scan request (`SCAN_REQ`).",39,N],[13,"ScanRsp",E,"Scan response (`SCAN_RSP`).",39,N],[13,"ConnectReq",E,"Connect request (`CONNECT_REQ`).",39,N],[13,R[26],E,E,39,N],[17,"CRC_PRESET",E,"CRC initialization value for advertising channel packets.",N,N],[17,"MAX_PAYLOAD_SIZE",E,"Max. advertising PDU payload size in Bytes.",N,N],[17,"ACCESS_ADDRESS",E,"Access Address to use for all advertising channel packets.",N,N],[11,"from_header_and_payload",E,"Constructs a PDU by parsing `payload`.",37,[[[R[51]],[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,"sender",E,"Returns the device address of the sender of this PDU.",37,[[["self"]],[R[2]]]],[11,"receiver",E,"Returns the intended receiver of this PDU.",37,[[["self"]],[[R[28],[R[2]]],[R[2]]]]],[11,"ty",E,"Returns the PDU type of `self`.",37,[[["self"]],[R[33]]]],[11,R[23],E,"Returns an iterator over all AD structures encoded in the…",37,[[["self"]],[R[28]]]],[11,R[29],E,"Returns the Access Address to use for data channel…",40,[[["self"]],["u32"]]],[11,R[30],E,"Returns the initialization value for the CRC calculation.",40,[[["self"]],["u32"]]],[11,"channel_map",E,"Returns the channel map specified by the initiator.",40,[[["self"]],[R[113]]]],[11,"hop",E,"Returns the channel hop distance.",40,[[["self"]],["u8"]]],[11,"end_of_tx_window",E,"Returns the end of the transmit window from reception of…",40,[[["self"]],[R[31]]]],[11,R[52],E,"Returns the connection event interval in µs.",40,[[["self"]],[R[31]]]],[11,"slave_latency",E,"Returns the slave latency (as the number of connection…",40,[[["self"]],["u16"]]],[11,"supervision_timeout",E,R[53],40,[[["self"]],[R[31]]]],[11,"connectable_undirected",E,"Creates a connectable undirected advertising PDU…",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,"connectable_directed",E,"Creates a connectable directed advertising PDU…",41,[[[R[2]]],["self"]]],[11,"nonconnectable_undirected",E,"Creates a non-connectable undirected advertising PDU…",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,"scannable_undirected",E,"Creates a scannable undirected advertising PDU…",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[1],E,"Creates an advertising channel PDU suitable for building a…",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[32],E,"Creates an advertising PDU that makes this device…",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,"scan_request",E,"Creates a scan request PDU.",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,"scan_response",E,"Creates a scan response PDU.",41,[[[R[2]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[51],E,E,41,[[["self"]],[R[51]]]],[11,"payload",E,E,41,[[["self"]]]],[11,"new",E,"Creates a new Advertising Channel PDU header specifying…",42,[[[R[33]]],["self"]]],[11,"parse",E,E,42,[[],["self"]]],[11,"to_u16",E,R[47],42,[[["self"]],["u16"]]],[11,"type_",E,"Returns the PDU type specified in the header.",42,[[["self"]],[R[33]]]],[11,"tx_add",E,"Returns the state of the `TxAdd` field.",42,[[["self"]],["bool"]]],[11,"set_tx_add",E,"Sets the `TxAdd` field's value.",42,[[["self"],["bool"]]]],[11,"rx_add",E,"Returns the state of the `RxAdd` field.",42,[[["self"]],["bool"]]],[11,"set_rx_add",E,"Sets the `RxAdd` field's value.",42,[[["self"],["bool"]]]],[11,R[48],E,R[49],42,[[["self"]],["u8"]]],[11,R[50],E,"Sets the payload length of this PDU.",42,[[["self"],["u8"]]]],[11,"is_beacon",E,"Returns whether this PDU type is a beacon advertisement.",39,[[["self"]],["bool"]]],[11,"allows_adv_data",E,"Whether AD structures can follow the fixed data in a PDU…",39,[[["self"]],["bool"]]],[11,R[34],R[13],"Create a company ID from a raw `u16`.",43,[[["u16"]],["self"]]],[11,"as_u16",E,"Get the raw `u16` representing this company identifier.",43,[[["self"]],["u16"]]],[11,"name",E,"Get the full company name from this identifer.",43,[[["self"]],[[R[28],["str"]],["str"]]]],[0,"data",E,"Data Channel structures.",N,N],[3,"Header",R[37],"16-bit data channel header preceding the payload.",N,N],[3,R[169],E,"Data transmitted with an `LL_CONNECTION_UPDATE_REQ`…",N,N],[4,"Llid",E,"Values of the LLID field in `Header`.",N,N],[13,"Reserved",E,"Reserved for future use.",44,N],[13,R[35],E,"Continuation of L2CAP message, or empty PDU.",44,N],[13,R[36],E,"Start of L2CAP message.",44,N],[13,"Control",E,"LL control PDU.",44,N],[4,"Pdu",E,"Structured representation of a data channel PDU.",N,N],[13,R[35],E,"Continuation of an L2CAP message (or empty PDU).",45,N],[12,"message",R[38],E,45,N],[13,R[36],R[37],"Start of an L2CAP message (must not be empty).",45,N],[12,"message",R[38],E,45,N],[13,"Control",R[37],"LL Control PDU for controlling the Link-Layer connection.",45,N],[12,"data",R[38],E,45,N],[4,R[166],R[37],"A structured representation of an LL Control PDU used by…",N,N],[13,R[40],E,"`0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection…",46,N],[13,R[41],E,"`0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.",46,N],[12,"map",R[39],E,46,N],[12,R[3],E,E,46,N],[13,R[42],R[37],"`0x02`/`LL_TERMINATE_IND` - Close the connection.",46,N],[12,"error_code",R[39],E,46,N],[13,R[43],R[37],"`0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported…",46,N],[12,"unknown_type",R[39],"Opcode of the unknown PDU.",46,N],[13,R[44],R[37],"`0x08`/`LL_FEATURE_REQ` - Master requests slave's features.",46,N],[12,"features_master",R[39],"Supported feature set of the master.",46,N],[13,R[45],R[37],"`0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ`…",46,N],[12,"features_used",R[39],"Features that will be used for the connection. Logical…",46,N],[13,R[46],R[37],"`0x0C`/`LL_VERSION_IND` - Bluetooth version indication…",46,N],[12,"vers_nr",R[39],E,46,N],[12,"comp_id",E,E,46,N],[12,"sub_vers_nr",E,E,46,N],[13,R[26],R[37],"Catch-all variant for unsupported opcodes.",46,N],[12,"opcode",R[39],"The opcode we don't support. This can also be the…",46,N],[12,"ctr_data",E,"Additional data depending on the opcode.",46,N],[4,R[167],R[37],"Enumeration of all known LL Control PDU opcodes (not all…",N,N],[13,R[40],E,E,47,N],[13,R[41],E,E,47,N],[13,R[42],E,E,47,N],[13,"EncReq",E,E,47,N],[13,"EncRsp",E,E,47,N],[13,"StartEncReq",E,E,47,N],[13,"StartEncRsp",E,E,47,N],[13,R[43],E,E,47,N],[13,R[44],E,E,47,N],[13,R[45],E,E,47,N],[13,"PauseEncReq",E,E,47,N],[13,"PauseEncRsp",E,E,47,N],[13,R[46],E,E,47,N],[13,"RejectInd",E,E,47,N],[13,"SlaveFeatureReq",E,E,47,N],[13,"ConnectionParamReq",E,E,47,N],[13,"ConnectionParamRsp",E,E,47,N],[13,"RejectIndExt",E,E,47,N],[13,"PingReq",E,E,47,N],[13,"PingRsp",E,E,47,N],[13,"LengthReq",E,E,47,N],[13,"LengthRsp",E,E,47,N],[13,R[26],E,E,47,N],[4,R[168],E,"Enumeration of all possible `VersNr` for `LL_VERSION_IND`…",N,N],[13,"V4_0",E,E,48,N],[13,"V4_1",E,E,48,N],[13,"V4_2",E,E,48,N],[13,"V5_0",E,E,48,N],[13,"V5_1",E,E,48,N],[13,R[26],E,E,48,N],[11,"new",E,"Creates a header with the given LLID field and all other…",49,[[["llid"]],["self"]]],[11,"parse",E,"Parses a header from raw bytes.",49,[[],["self"]]],[11,"to_u16",E,R[47],49,[[["self"]],["u16"]]],[11,R[48],E,R[49],49,[[["self"]],["u8"]]],[11,R[50],E,"Sets the payload length field to `len`.",49,[[["self"],["u8"]]]],[11,"llid",E,"Returns the `LLID` field (PDU type).",49,[[["self"]],["llid"]]],[11,"nesn",E,"Returns the value of the `NESN` field (Next Expected…",49,[[["self"]],["seqnum"]]],[11,"set_nesn",E,"Sets the value of the `NESN` field.",49,[[["self"],["seqnum"]]]],[11,"sn",E,"Returns the value of the `SN` field (Sequence Number).",49,[[["self"]],["seqnum"]]],[11,"set_sn",E,"Sets the value of the `SN` field.",49,[[["self"],["seqnum"]]]],[11,"md",E,"Returns whether the `MD` field is set (More Data).",49,[[["self"]],["bool"]]],[11,"set_md",E,"Sets the value of the `MD` field.",49,[[["self"],["bool"]]]],[11,"empty",E,"Creates an empty PDU that carries no message.",45,[[],["self"]]],[11,"llid",E,"Returns the `LLID` field to use for this PDU.",45,[[["self"]],["llid"]]],[11,"parse",E,"Parses a PDU from a `Header` and raw payload.",45,[[[R[51]]],[[R[4],[R[5]]],[R[5]]]]],[11,"win_size",E,"Returns the size of the transmit window for the first PDU…",50,[[["self"]],[R[31]]]],[11,"win_offset",E,"Returns the offset of the transmit window, as a duration…",50,[[["self"]],[R[31]]]],[11,R[52],E,"Returns the duration between connection events.",50,[[["self"]],[R[31]]]],[11,"latency",E,"Returns the slave latency.",50,[[["self"]],["u16"]]],[11,"timeout",E,R[53],50,[[["self"]],[R[31]]]],[11,R[3],E,"Returns the instant at which these changes should take…",50,[[["self"]],["u16"]]],[11,"opcode",E,"Returns the opcode of this LL Control PDU.",46,[[["self"]],[R[112]]]],[11,"new",R[13],"Create a new device address from 6 raw Bytes and an…",51,[[[R[54]]],["self"]]],[11,"kind",E,"Returns the address kind.",51,[[["self"]],[R[54]]]],[11,"is_random",E,"Returns whether this address is randomly generated.",51,[[["self"]],["bool"]]],[11,"raw",E,"Returns the raw bytes making up this address.",51,[[["self"]]]],[18,"LE_ENCRYPTION",E,"Low-Energy data encryption.",52,N],[18,"CONN_PARAM_REQ",E,"Connection parameters request procedure.",52,N],[18,"EXTENDED_REJECT_INDICATION",E,"Support for the LL Control PDU `LL_REJECT_IND_EXT`.",52,N],[18,"SLAVE_FEATURE_EXCHANGE",E,"Slave-initiated feature exchange.",52,N],[18,"LE_PING",E,"Low-Energy Link-Layer ping exchange.",52,N],[18,"LE_PACKET_LENGTH_EXTENSION",E,"Link-Layer PDU length update (support for data channel…",52,N],[18,"LL_PRIVACY",E,"Support for untrackable randomized device addresses (LL…",52,N],[18,"EXT_SCANNER_FILTER_POLICIES",E,"Extended scan filter policies.",52,N],[11,"empty",E,R[55],52,[[],[R[57]]]],[11,"all",E,R[56],52,[[],[R[57]]]],[11,"bits",E,R[58],52,[[["self"]],["u64"]]],[11,R[59],E,R[60],52,[[["u64"]],[[R[28],[R[57]]],[R[57]]]]],[11,R[61],E,R[62],52,[[["u64"]],[R[57]]]],[11,R[17],E,R[63],52,[[["self"]],["bool"]]],[11,"is_all",E,R[64],52,[[["self"]],["bool"]]],[11,R[65],E,R[66],52,[[["self"],[R[57]]],["bool"]]],[11,R[67],E,R[68],52,[[["self"],[R[57]]],["bool"]]],[11,"insert",E,R[69],52,[[["self"],[R[57]]]]],[11,"remove",E,R[70],52,[[["self"],[R[57]]]]],[11,"toggle",E,R[71],52,[[["self"],[R[57]]]]],[11,"set",E,R[72],52,[[["self"],["bool"],[R[57]]]]],[11,"supported",E,"Returns the feature set supported by Rubble.",52,[[],["self"]]],[0,"filter",E,"Link-Layer Device Filtering.",N,N],[3,"AllowAll",R[94],"An `AddressFilter` that allows all devices (ie. no…",N,N],[3,R[173],E,"An `AddressFilter` that checks device addresses against a…",N,N],[3,R[174],E,"Advertising filter policy. Governs which devices may scan…",N,N],[3,R[175],E,"Scanner filter policy. Governs which devices will be…",N,N],[6,"SliceIter",E,E,N,N],[6,"SingleIter",E,E,N,N],[8,R[172],E,E,N,N],[10,"matches",E,E,53,[[["self"],[R[2]]],["bool"]]],[11,"new",E,"Creates a device whitelist from an iterator yielding the…",54,[[["i"]],["self"]]],[11,R[134],E,"Creates a device whitelist from a slice of device addresses.",54,[[],["self"]]],[11,"from_address",E,"Creates a device whitelist that will allow a single device.",54,[[[R[2]]],["self"]]],[11,"new",E,"Creates a new filter policy from behaviors for scan and…",55,[[["c"],["s"]],["self"]]],[11,"may_scan",E,E,55,[[["self"],[R[2]]],["bool"]]],[11,"may_connect",E,E,55,[[["self"],[R[2]]],["bool"]]],[11,"new",E,"Creates a new scanner filter policy from an `AddressFilter`.",56,[[["s"]],["self"]]],[11,"should_scan",E,E,56,[[["self"],[R[2]]],["bool"]]],[0,"queue",R[13],"An SPSC queue for data channel PDUs.",N,N],[3,"Producer",R[95],"Writing end of a packet queue.",N,N],[3,"Consumer",E,"Reading end of a packet queue.",N,N],[3,"Consume",E,"Bundles a `T` along with information telling a queue…",N,N],[5,"create",E,"Converts a `BBQueue` to a pair of packet queue endpoints.",N,[[["bbqueue"]]]],[11,"has_space",E,"Queries whether there is a free contiguous chunk of memory…",57,[[["self"],[R[8]]],["bool"]]],[11,"free_space",E,"Returns the size of the largest contiguous free space in…",57,[[["self"]],[R[8]]]],[11,"produce_with",E,"Enqueue a new data channel PDU by passing a `ByteWriter`…",57,[[["self"]],[R[4]]]],[11,"produce_pdu",E,"Enqueues a data channel PDU.",57,[[["tobytes"],["self"],["pdu"]],[[R[4],[R[5]]],[R[5]]]]],[11,"produce_raw",E,"Enqueues a data channel PDU, where the payload is given as…",57,[[["self"],[R[51]]],[[R[4],[R[5]]],[R[5]]]]],[11,"has_data",E,"Queries whether there is at least 1 packet that can be…",58,[[["self"]],["bool"]]],[11,"consume_pdu_with",E,"Tries to read a packet from the queue and passes it to `f`.",58,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"consume_raw_with",E,E,58,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"new",E,"Consume the currently processed packet iff `consume` is…",59,[[[R[4],[R[5]]],["bool"],[R[5]]],["self"]]],[11,"always",E,"Consume the currently processed packet, then return…",59,[[[R[4],[R[5]]],[R[5]]],["self"]]],[11,"never",E,"Do not consume the currently processed packet, then return…",59,[[[R[4],[R[5]]],[R[5]]],["self"]]],[11,"on_success",E,"Consume the currently processed packet if `result`…",59,[[[R[4],[R[5]]],[R[5]]],["self"]]],[11,"new",R[13],E,60,[[[R[73]],["l2capstate"],[R[11]]],["self"]]],[11,"has_work",E,"Returns `true` when this responder has work to do.",60,[[["self"]],["bool"]]],[11,"process_one",E,"Processes a single incoming packet in the packet queue.",60,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[17,"CRC_POLY",E,"The CRC polynomial to use for CRC24 generation.",N,N],[17,"MIN_PAYLOAD_BUF",E,"Min. size a PDU payload buffer must have (to cover both…",N,N],[17,"MIN_PDU_BUF",E,"Min. size a Link-Layer PDU buffer must have (to cover both…",N,N],[17,"MIN_PACKET_BUF",E,"Min. size a buffer for Link-Layer packets must have to…",N,N],[8,R[177],E,"Defines types that provide platform-dependent functionality.",N,N],[16,"Timer",E,"A timesource with microsecond accuracy.",61,N],[16,"Tx",E,"The BLE packet transmitter.",61,N],[8,R[178],E,"Trait for Link Layer packet transmission.",N,N],[10,R[108],E,"Get a reference to the Transmitter's PDU payload buffer.",62,[[["self"]]]],[10,R[109],E,"Transmit an Advertising Channel PDU.",62,[[[R[110]],["self"],[R[51]]]]],[10,R[111],E,"Transmit a Data Channel PDU.",62,[[["u32"],[R[80]],["self"],[R[51]]]]],[11,"new",E,"Creates a new Link-Layer.",63,[[[R[2]]],["self"]]],[11,"timer",E,"Returns a reference to the timer instance used by the…",63,[[["self"]]]],[11,"start_advertise",E,"Starts advertising this device, optionally sending data…",63,[[[R[73]],["self"],[R[31]],[R[11]]],[[R[74]],[R[5]],[R[4],[R[74],R[5]]]]]],[11,R[75],E,"Process an incoming packet from an advertising channel.",63,[[["self"],[R[51]],["bool"],[R[3]]],["cmd"]]],[11,"process_data_packet",E,"Process an incoming data channel packet.",63,[[["self"],[R[51]],["bool"],[R[3]]],["cmd"]]],[11,"update",E,"Update the Link-Layer state.",63,[[["self"]],["cmd"]]],[11,"is_advertising",E,E,63,[[["self"]],["bool"]]],[11,"new",E,E,64,[[["r"]],["self"]]],[0,"phy",R[0],"Physical layer interactions.",N,N],[3,R[181],R[96],"One of the three advertising channels (channel indices 37,…",N,N],[3,R[182],E,"One of 37 data channels on which data channel PDUs are…",N,N],[3,R[183],E,"A map marking data channels as used or unused.",N,N],[8,"Radio",E,"Trait for raw 2.4 GHz non-BLE-specific radios.",N,N],[10,"transmit",E,"Transmit every Byte in `buf` over the air, LSb first, at…",65,[[["self"],["u16"]]]],[11,"first",E,"Returns the first (lowest-numbered) advertising channel.",66,[[],["self"]]],[11,"iter_all",E,"Returns an iterator that yields all 3 advertising channels…",66,[[]]],[11,"cycle",E,"Returns the next advertising channel, or the first one if…",66,[[["self"]],["self"]]],[11,R[76],E,"Returns the RF channel corresponding to this advertising…",66,[[["self"]],["u8"]]],[11,"freq",E,R[77],66,[[["self"]],["u16"]]],[11,R[78],E,R[79],66,[[["self"]],["u8"]]],[11,"new",E,"Creates a `DataChannelIndex` from a raw index.",67,[[["u8"]],["self"]]],[11,"index",E,"Returns the data channel index.",67,[[["self"]],["u8"]]],[11,R[76],E,"Returns the RF channel corresponding to this data channel…",67,[[["self"]],["u8"]]],[11,"freq",E,R[77],67,[[["self"]],["u16"]]],[11,R[78],E,R[79],67,[[["self"]],["u8"]]],[11,R[34],E,"Create a new channel map from the raw format used in…",68,[[],["self"]]],[11,"to_raw",E,"Returns the raw bytes encoding this channel map.",68,[[["self"]]]],[11,"with_all_channels",E,"Creates a new channel map that marks all data channels as…",68,[[],["self"]]],[11,"num_used_channels",E,"Returns the number of data channels marked as used by this…",68,[[["self"]],["u8"]]],[11,"is_used",E,"Returns whether the given data channel is marked as used.",68,[[[R[80]],["self"]],["bool"]]],[11,"iter_used",E,"Returns an iterator over all data channels marked as used…",68,[[["self"]]]],[11,"by_index",E,"Returns the `n`th channel marked as used.",68,[[["u8"],["self"]],[R[80]]]],[0,"security_manager",R[0],"The LE Security Manager protocol.",N,N],[3,R[194],R[97],"LE Secure Connections are not supported and will not be…",N,N],[3,R[195],E,"Indicates support for LE Secure Connections.",N,N],[3,R[187],E,"The LE Security Manager.",N,N],[3,"AuthReq",E,"Authentication requirements exchanged during pairing…",N,N],[3,R[188],E,"Indicates which types of keys a device requests for…",N,N],[4,R[184],E,"Describes the I/O capabilities of a device that can be…",N,N],[13,"DisplayOnly",E,"Device can display a 6-digit number, but has no input…",69,N],[13,"DisplayYesNo",E,"Device can display a 6-digit number and the user can input…",69,N],[13,"KeyboardOnly",E,"Device does not have output capability, but the user can…",69,N],[13,"NoInputNoOutput",E,"Device has no meaningful input and output capabilities.",69,N],[13,"KeyboardDisplay",E,"Device can display a 6-digit passcode and allows passcode…",69,N],[13,R[26],E,E,69,N],[4,R[185],E,"Whether to perform bonding in addition to pairing.",N,N],[13,"NoBonding",E,"No bonding should be performed; the exchanged keys should…",70,N],[13,"Bonding",E,"Permanently store the exchanged keys to allow resuming…",70,N],[13,R[26],E,E,70,N],[8,R[186],E,"Supported security levels.",N,N],[18,"MTU",E,"The L2CAP MTU required by this security level.",71,N],[11,"no_security",E,E,72,[[],["self"]]],[11,"bonding_type",E,"Returns the requested bonding.",73,[[["self"]],[R[81]]]],[11,"set_bonding_type",E,E,73,[[["self"],[R[81]]]]],[11,"mitm",E,"Returns whether MITM protection is requested.",73,[[["self"]],["bool"]]],[11,"set_mitm",E,E,73,[[["self"],["bool"]]]],[11,"secure_connection",E,"Returns whether LE Secure Connection pairing is supported…",73,[[["self"]],["bool"]]],[11,"set_secure_connection",E,"Sets whether LE Secure Connection pairing is supported and…",73,[[["self"],["bool"]]]],[11,"keypress",E,E,73,[[["self"]],["bool"]]],[11,"set_keypress",E,E,73,[[["self"],["bool"]]]],[18,"ENC_KEY",E,E,74,N],[18,"ID_KEY",E,E,74,N],[18,"SIGN_KEY",E,E,74,N],[18,"LINK_KEY",E,E,74,N],[11,"empty",E,R[55],74,[[],[R[82]]]],[11,"all",E,R[56],74,[[],[R[82]]]],[11,"bits",E,R[58],74,[[["self"]],["u8"]]],[11,R[59],E,R[60],74,[[["u8"]],[[R[28],[R[82]]],[R[82]]]]],[11,R[61],E,R[62],74,[[["u8"]],[R[82]]]],[11,R[17],E,R[63],74,[[["self"]],["bool"]]],[11,"is_all",E,R[64],74,[[["self"]],["bool"]]],[11,R[65],E,R[66],74,[[["self"],[R[82]]],["bool"]]],[11,R[67],E,R[68],74,[[["self"],[R[82]]],["bool"]]],[11,"insert",E,R[69],74,[[["self"],[R[82]]]]],[11,"remove",E,R[70],74,[[["self"],[R[82]]]]],[11,"toggle",E,R[71],74,[[["self"],[R[82]]]]],[11,"set",E,R[72],74,[[["self"],[R[82]],["bool"]]]],[0,"time",R[0],"Time APIs for obtaining the current time and calculating…",N,N],[3,"Duration",R[98],"A duration with microsecond resolution.",N,N],[3,"Instant",E,"A point in time, relative to an unspecfied epoch.",N,N],[8,"Timer",E,"Trait for time providers.",N,N],[10,"now",E,"Obtain the current time as an `Instant`.",75,[[["self"]],[R[3]]]],[18,"T_IFS",E,"The duration of the interframe spacing between BLE packets.",76,N],[11,"from_micros",E,"Creates a `Duration` from a number of microseconds.",76,[[["u32"]],["self"]]],[11,"from_millis",E,"Creates a `Duration` representing the given number of…",76,[[["u16"]],["self"]]],[11,"from_secs",E,"Creates a `Duration` representing a number of seconds.",76,[[["u16"]],["self"]]],[11,"whole_secs",E,"Returns the number of whole seconds that fit in `self`.",76,[[["self"]],["u32"]]],[11,"whole_millis",E,"Returns the number of whole milliseconds that fit in `self`.",76,[[["self"]],["u32"]]],[11,"as_micros",E,"Returns the number of microseconds represented by `self`.",76,[[["self"]],["u32"]]],[11,"subsec_micros",E,"Returns the fractional part of microseconds in `self`.",76,[[["self"]],["u32"]]],[18,"MAX_TIME_BETWEEN",E,"The maximum time between two `Instant`s that can be…",77,N],[11,"from_raw_micros",E,"Creates an `Instant` from raw microseconds since an…",77,[[["u32"]],["self"]]],[11,"raw_micros",E,"Returns the raw value from which this `Instant` was created.",77,[[["self"]],["u32"]]],[11,"duration_since",E,"Calculates the duration of time that has passed between…",77,[[["self"],[R[3]]],[R[31]]]],[0,"uuid",R[0],"BLE UUIDs (16, 32 or 128 bits).",N,N],[3,"Uuid",R[99],"A Universally Unique Identifier (UUID).",N,N],[3,"Uuid16",E,"A 16-bit UUID alias.",N,N],[12,"0",E,E,78,N],[3,"Uuid32",E,"A 32-bit UUID alias.",N,N],[12,"0",E,E,79,N],[4,"UuidKind",E,E,N,N],[13,"Uuid16",E,E,80,N],[13,"Uuid32",E,E,80,N],[13,"Uuid128",E,E,80,N],[8,"IsUuid",E,"Marker for UUID types.",N,N],[18,"KIND",E,E,81,N],[17,"BLUETOOTH_VERSION",R[0],"Version of the Bluetooth specification implemented by…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[84],E,E,0,[[[U]],[R[4]]]],[11,R[85],E,E,0,[[],[R[4]]]],[11,"into",E,E,0,[[],[U]]],[11,R[88],E,E,0,[[["self"]],[T]]],[11,R[86],E,E,0,[[["self"]],[T]]],[11,R[87],E,E,0,[[["self"]],[R[89]]]],[11,"from",R[83],E,8,[[[T]],[T]]],[11,R[84],E,E,8,[[[U]],[R[4]]]],[11,R[85],E,E,8,[[],[R[4]]]],[11,"into",E,E,8,[[],[U]]],[11,R[88],E,E,8,[[["self"]],[T]]],[11,R[86],E,E,8,[[["self"]],[T]]],[11,R[87],E,E,8,[[["self"]],[R[89]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[84],E,E,1,[[[U]],[R[4]]]],[11,R[85],E,E,1,[[],[R[4]]]],[11,"into",E,E,1,[[],[U]]],[11,R[88],E,E,1,[[["self"]],[T]]],[11,R[86],E,E,1,[[["self"]],[T]]],[11,R[87],E,E,1,[[["self"]],[R[89]]]],[11,"from",E,E,82,[[[T]],[T]]],[11,R[84],E,E,82,[[[U]],[R[4]]]],[11,R[85],E,E,82,[[],[R[4]]]],[11,"into",E,E,82,[[],[U]]],[11,R[88],E,E,82,[[["self"]],[T]]],[11,R[86],E,E,82,[[["self"]],[T]]],[11,R[87],E,E,82,[[["self"]],[R[89]]]],[11,"from",E,E,83,[[[T]],[T]]],[11,R[84],E,E,83,[[[U]],[R[4]]]],[11,R[85],E,E,83,[[],[R[4]]]],[11,"into",E,E,83,[[],[U]]],[11,R[88],E,E,83,[[["self"]],[T]]],[11,R[86],E,E,83,[[["self"]],[T]]],[11,R[87],E,E,83,[[["self"]],[R[89]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[84],E,E,10,[[[U]],[R[4]]]],[11,R[85],E,E,10,[[],[R[4]]]],[11,"into",E,E,10,[[],[U]]],[11,R[88],E,E,10,[[["self"]],[T]]],[11,R[86],E,E,10,[[["self"]],[T]]],[11,R[87],E,E,10,[[["self"]],[R[89]]]],[11,"from",E,E,84,[[[T]],[T]]],[11,R[84],E,E,84,[[[U]],[R[4]]]],[11,R[85],E,E,84,[[],[R[4]]]],[11,"into",E,E,84,[[],[U]]],[11,R[88],E,E,84,[[["self"]],[T]]],[11,R[86],E,E,84,[[["self"]],[T]]],[11,R[87],E,E,84,[[["self"]],[R[89]]]],[11,"from",E,E,85,[[[T]],[T]]],[11,R[84],E,E,85,[[[U]],[R[4]]]],[11,R[85],E,E,85,[[],[R[4]]]],[11,"into",E,E,85,[[],[U]]],[11,R[88],E,E,85,[[["self"]],[T]]],[11,R[86],E,E,85,[[["self"]],[T]]],[11,R[87],E,E,85,[[["self"]],[R[89]]]],[11,"from",E,E,86,[[[T]],[T]]],[11,R[84],E,E,86,[[[U]],[R[4]]]],[11,R[85],E,E,86,[[],[R[4]]]],[11,"into",E,E,86,[[],[U]]],[11,R[88],E,E,86,[[["self"]],[T]]],[11,R[86],E,E,86,[[["self"]],[T]]],[11,R[87],E,E,86,[[["self"]],[R[89]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[84],E,E,2,[[[U]],[R[4]]]],[11,R[85],E,E,2,[[],[R[4]]]],[11,"into",E,E,2,[[],[U]]],[11,R[88],E,E,2,[[["self"]],[T]]],[11,R[86],E,E,2,[[["self"]],[T]]],[11,R[87],E,E,2,[[["self"]],[R[89]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[84],E,E,3,[[[U]],[R[4]]]],[11,R[85],E,E,3,[[],[R[4]]]],[11,"into",E,E,3,[[],[U]]],[11,R[88],E,E,3,[[["self"]],[T]]],[11,R[86],E,E,3,[[["self"]],[T]]],[11,R[87],E,E,3,[[["self"]],[R[89]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[84],E,E,4,[[[U]],[R[4]]]],[11,R[85],E,E,4,[[],[R[4]]]],[11,"into",E,E,4,[[],[U]]],[11,R[88],E,E,4,[[["self"]],[T]]],[11,R[86],E,E,4,[[["self"]],[T]]],[11,R[87],E,E,4,[[["self"]],[R[89]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[84],E,E,5,[[[U]],[R[4]]]],[11,R[85],E,E,5,[[],[R[4]]]],[11,"into",E,E,5,[[],[U]]],[11,R[88],E,E,5,[[["self"]],[T]]],[11,R[86],E,E,5,[[["self"]],[T]]],[11,R[87],E,E,5,[[["self"]],[R[89]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[84],E,E,6,[[[U]],[R[4]]]],[11,R[85],E,E,6,[[],[R[4]]]],[11,"into",E,E,6,[[],[U]]],[11,R[88],E,E,6,[[["self"]],[T]]],[11,R[86],E,E,6,[[["self"]],[T]]],[11,R[87],E,E,6,[[["self"]],[R[89]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[84],E,E,7,[[[U]],[R[4]]]],[11,R[85],E,E,7,[[],[R[4]]]],[11,"into",E,E,7,[[],[U]]],[11,R[88],E,E,7,[[["self"]],[T]]],[11,R[86],E,E,7,[[["self"]],[T]]],[11,R[87],E,E,7,[[["self"]],[R[89]]]],[11,"from",R[90],E,12,[[[T]],[T]]],[11,R[84],E,E,12,[[[U]],[R[4]]]],[11,R[85],E,E,12,[[],[R[4]]]],[11,"into",E,E,12,[[],[U]]],[11,R[88],E,E,12,[[["self"]],[T]]],[11,R[86],E,E,12,[[["self"]],[T]]],[11,R[87],E,E,12,[[["self"]],[R[89]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[84],E,E,13,[[[U]],[R[4]]]],[11,R[85],E,E,13,[[],[R[4]]]],[11,"into",E,E,13,[[],[U]]],[11,R[88],E,E,13,[[["self"]],[T]]],[11,R[86],E,E,13,[[["self"]],[T]]],[11,R[87],E,E,13,[[["self"]],[R[89]]]],[11,"from",R[91],E,16,[[[T]],[T]]],[11,R[84],E,E,16,[[[U]],[R[4]]]],[11,R[85],E,E,16,[[],[R[4]]]],[11,"into",E,E,16,[[],[U]]],[11,R[88],E,E,16,[[["self"]],[T]]],[11,R[86],E,E,16,[[["self"]],[T]]],[11,R[87],E,E,16,[[["self"]],[R[89]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[84],E,E,17,[[[U]],[R[4]]]],[11,R[85],E,E,17,[[],[R[4]]]],[11,"into",E,E,17,[[],[U]]],[11,R[88],E,E,17,[[["self"]],[T]]],[11,R[86],E,E,17,[[["self"]],[T]]],[11,R[87],E,E,17,[[["self"]],[R[89]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[84],E,E,18,[[[U]],[R[4]]]],[11,R[85],E,E,18,[[],[R[4]]]],[11,"into",E,E,18,[[],[U]]],[11,R[88],E,E,18,[[["self"]],[T]]],[11,R[86],E,E,18,[[["self"]],[T]]],[11,R[87],E,E,18,[[["self"]],[R[89]]]],[11,"from",R[92],E,20,[[[T]],[T]]],[11,R[84],E,E,20,[[[U]],[R[4]]]],[11,R[85],E,E,20,[[],[R[4]]]],[11,"into",E,E,20,[[],[U]]],[11,R[88],E,E,20,[[["self"]],[T]]],[11,R[86],E,E,20,[[["self"]],[T]]],[11,R[87],E,E,20,[[["self"]],[R[89]]]],[11,"from",E,E,87,[[[T]],[T]]],[11,R[84],E,E,87,[[[U]],[R[4]]]],[11,R[85],E,E,87,[[],[R[4]]]],[11,"into",E,E,87,[[],[U]]],[11,R[88],E,E,87,[[["self"]],[T]]],[11,R[86],E,E,87,[[["self"]],[T]]],[11,R[87],E,E,87,[[["self"]],[R[89]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[84],E,E,21,[[[U]],[R[4]]]],[11,R[85],E,E,21,[[],[R[4]]]],[11,"into",E,E,21,[[],[U]]],[11,R[88],E,E,21,[[["self"]],[T]]],[11,R[86],E,E,21,[[["self"]],[T]]],[11,R[87],E,E,21,[[["self"]],[R[89]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[84],E,E,19,[[[U]],[R[4]]]],[11,R[85],E,E,19,[[],[R[4]]]],[11,"into",E,E,19,[[],[U]]],[11,R[88],E,E,19,[[["self"]],[T]]],[11,R[86],E,E,19,[[["self"]],[T]]],[11,R[87],E,E,19,[[["self"]],[R[89]]]],[11,"from",R[93],E,25,[[[T]],[T]]],[11,R[84],E,E,25,[[[U]],[R[4]]]],[11,R[85],E,E,25,[[],[R[4]]]],[11,"into",E,E,25,[[],[U]]],[11,R[88],E,E,25,[[["self"]],[T]]],[11,R[86],E,E,25,[[["self"]],[T]]],[11,R[87],E,E,25,[[["self"]],[R[89]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[84],E,E,26,[[[U]],[R[4]]]],[11,R[85],E,E,26,[[],[R[4]]]],[11,"into",E,E,26,[[],[U]]],[11,R[88],E,E,26,[[["self"]],[T]]],[11,R[86],E,E,26,[[["self"]],[T]]],[11,R[87],E,E,26,[[["self"]],[R[89]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[84],E,E,27,[[[U]],[R[4]]]],[11,R[85],E,E,27,[[],[R[4]]]],[11,"into",E,E,27,[[],[U]]],[11,R[88],E,E,27,[[["self"]],[T]]],[11,R[86],E,E,27,[[["self"]],[T]]],[11,R[87],E,E,27,[[["self"]],[R[89]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[84],E,E,28,[[[U]],[R[4]]]],[11,R[85],E,E,28,[[],[R[4]]]],[11,"into",E,E,28,[[],[U]]],[11,R[88],E,E,28,[[["self"]],[T]]],[11,R[86],E,E,28,[[["self"]],[T]]],[11,R[87],E,E,28,[[["self"]],[R[89]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[84],E,E,29,[[[U]],[R[4]]]],[11,R[85],E,E,29,[[],[R[4]]]],[11,"into",E,E,29,[[],[U]]],[11,R[88],E,E,29,[[["self"]],[T]]],[11,R[86],E,E,29,[[["self"]],[T]]],[11,R[87],E,E,29,[[["self"]],[R[89]]]],[11,"from",R[13],E,43,[[[T]],[T]]],[11,R[84],E,E,43,[[[U]],[R[4]]]],[11,R[85],E,E,43,[[],[R[4]]]],[11,"into",E,E,43,[[],[U]]],[11,R[88],E,E,43,[[["self"]],[T]]],[11,R[86],E,E,43,[[["self"]],[T]]],[11,R[87],E,E,43,[[["self"]],[R[89]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[84],E,E,51,[[[U]],[R[4]]]],[11,R[85],E,E,51,[[],[R[4]]]],[11,"into",E,E,51,[[],[U]]],[11,R[88],E,E,51,[[["self"]],[T]]],[11,R[86],E,E,51,[[["self"]],[T]]],[11,R[87],E,E,51,[[["self"]],[R[89]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[84],E,E,52,[[[U]],[R[4]]]],[11,R[85],E,E,52,[[],[R[4]]]],[11,"into",E,E,52,[[],[U]]],[11,R[88],E,E,52,[[["self"]],[T]]],[11,R[86],E,E,52,[[["self"]],[T]]],[11,R[87],E,E,52,[[["self"]],[R[89]]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[84],E,E,60,[[[U]],[R[4]]]],[11,R[85],E,E,60,[[],[R[4]]]],[11,"into",E,E,60,[[],[U]]],[11,R[88],E,E,60,[[["self"]],[T]]],[11,R[86],E,E,60,[[["self"]],[T]]],[11,R[87],E,E,60,[[["self"]],[R[89]]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[84],E,E,63,[[[U]],[R[4]]]],[11,R[85],E,E,63,[[],[R[4]]]],[11,"into",E,E,63,[[],[U]]],[11,R[88],E,E,63,[[["self"]],[T]]],[11,R[86],E,E,63,[[["self"]],[T]]],[11,R[87],E,E,63,[[["self"]],[R[89]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[84],E,E,30,[[[U]],[R[4]]]],[11,R[85],E,E,30,[[],[R[4]]]],[11,"into",E,E,30,[[],[U]]],[11,R[88],E,E,30,[[["self"]],[T]]],[11,R[86],E,E,30,[[["self"]],[T]]],[11,R[87],E,E,30,[[["self"]],[R[89]]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[84],E,E,64,[[[U]],[R[4]]]],[11,R[85],E,E,64,[[],[R[4]]]],[11,"into",E,E,64,[[],[U]]],[11,R[88],E,E,64,[[["self"]],[T]]],[11,R[86],E,E,64,[[["self"]],[T]]],[11,R[87],E,E,64,[[["self"]],[R[89]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[84],E,E,31,[[[U]],[R[4]]]],[11,R[85],E,E,31,[[],[R[4]]]],[11,"into",E,E,31,[[],[U]]],[11,R[88],E,E,31,[[["self"]],[T]]],[11,R[86],E,E,31,[[["self"]],[T]]],[11,R[87],E,E,31,[[["self"]],[R[89]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[84],E,E,32,[[[U]],[R[4]]]],[11,R[85],E,E,32,[[],[R[4]]]],[11,"into",E,E,32,[[],[U]]],[11,R[88],E,E,32,[[["self"]],[T]]],[11,R[86],E,E,32,[[["self"]],[T]]],[11,R[87],E,E,32,[[["self"]],[R[89]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[84],E,E,33,[[[U]],[R[4]]]],[11,R[85],E,E,33,[[],[R[4]]]],[11,"into",E,E,33,[[],[U]]],[11,R[88],E,E,33,[[["self"]],[T]]],[11,R[86],E,E,33,[[["self"]],[T]]],[11,R[87],E,E,33,[[["self"]],[R[89]]]],[11,"from",R[15],E,35,[[[T]],[T]]],[11,R[84],E,E,35,[[[U]],[R[4]]]],[11,R[85],E,E,35,[[],[R[4]]]],[11,"into",E,E,35,[[],[U]]],[11,R[88],E,E,35,[[["self"]],[T]]],[11,R[86],E,E,35,[[["self"]],[T]]],[11,R[87],E,E,35,[[["self"]],[R[89]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[84],E,E,36,[[[U]],[R[4]]]],[11,R[85],E,E,36,[[],[R[4]]]],[11,"into",E,E,36,[[],[U]]],[11,R[88],E,E,36,[[["self"]],[T]]],[11,R[86],E,E,36,[[["self"]],[T]]],[11,R[87],E,E,36,[[["self"]],[R[89]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[84],E,E,34,[[[U]],[R[4]]]],[11,R[85],E,E,34,[[],[R[4]]]],[11,"into",E,E,34,[[],[U]]],[11,R[88],E,E,34,[[["self"]],[T]]],[11,R[86],E,E,34,[[["self"]],[T]]],[11,R[87],E,E,34,[[["self"]],[R[89]]]],[11,"from",R[19],E,40,[[[T]],[T]]],[11,R[84],E,E,40,[[[U]],[R[4]]]],[11,R[85],E,E,40,[[],[R[4]]]],[11,"into",E,E,40,[[],[U]]],[11,R[88],E,E,40,[[["self"]],[T]]],[11,R[86],E,E,40,[[["self"]],[T]]],[11,R[87],E,E,40,[[["self"]],[R[89]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[84],E,E,41,[[[U]],[R[4]]]],[11,R[85],E,E,41,[[],[R[4]]]],[11,"into",E,E,41,[[],[U]]],[11,R[88],E,E,41,[[["self"]],[T]]],[11,R[86],E,E,41,[[["self"]],[T]]],[11,R[87],E,E,41,[[["self"]],[R[89]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[84],E,E,42,[[[U]],[R[4]]]],[11,R[85],E,E,42,[[],[R[4]]]],[11,"into",E,E,42,[[],[U]]],[11,R[88],E,E,42,[[["self"]],[T]]],[11,R[86],E,E,42,[[["self"]],[T]]],[11,R[87],E,E,42,[[["self"]],[R[89]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[84],E,E,37,[[[U]],[R[4]]]],[11,R[85],E,E,37,[[],[R[4]]]],[11,"into",E,E,37,[[],[U]]],[11,R[88],E,E,37,[[["self"]],[T]]],[11,R[86],E,E,37,[[["self"]],[T]]],[11,R[87],E,E,37,[[["self"]],[R[89]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[84],E,E,38,[[[U]],[R[4]]]],[11,R[85],E,E,38,[[],[R[4]]]],[11,"into",E,E,38,[[],[U]]],[11,R[88],E,E,38,[[["self"]],[T]]],[11,R[86],E,E,38,[[["self"]],[T]]],[11,R[87],E,E,38,[[["self"]],[R[89]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[84],E,E,39,[[[U]],[R[4]]]],[11,R[85],E,E,39,[[],[R[4]]]],[11,"into",E,E,39,[[],[U]]],[11,R[88],E,E,39,[[["self"]],[T]]],[11,R[86],E,E,39,[[["self"]],[T]]],[11,R[87],E,E,39,[[["self"]],[R[89]]]],[11,"from",R[37],E,49,[[[T]],[T]]],[11,R[84],E,E,49,[[[U]],[R[4]]]],[11,R[85],E,E,49,[[],[R[4]]]],[11,"into",E,E,49,[[],[U]]],[11,R[88],E,E,49,[[["self"]],[T]]],[11,R[86],E,E,49,[[["self"]],[T]]],[11,R[87],E,E,49,[[["self"]],[R[89]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[84],E,E,50,[[[U]],[R[4]]]],[11,R[85],E,E,50,[[],[R[4]]]],[11,"into",E,E,50,[[],[U]]],[11,R[88],E,E,50,[[["self"]],[T]]],[11,R[86],E,E,50,[[["self"]],[T]]],[11,R[87],E,E,50,[[["self"]],[R[89]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[84],E,E,44,[[[U]],[R[4]]]],[11,R[85],E,E,44,[[],[R[4]]]],[11,"into",E,E,44,[[],[U]]],[11,R[88],E,E,44,[[["self"]],[T]]],[11,R[86],E,E,44,[[["self"]],[T]]],[11,R[87],E,E,44,[[["self"]],[R[89]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[84],E,E,45,[[[U]],[R[4]]]],[11,R[85],E,E,45,[[],[R[4]]]],[11,"into",E,E,45,[[],[U]]],[11,R[88],E,E,45,[[["self"]],[T]]],[11,R[86],E,E,45,[[["self"]],[T]]],[11,R[87],E,E,45,[[["self"]],[R[89]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[84],E,E,46,[[[U]],[R[4]]]],[11,R[85],E,E,46,[[],[R[4]]]],[11,"into",E,E,46,[[],[U]]],[11,R[88],E,E,46,[[["self"]],[T]]],[11,R[86],E,E,46,[[["self"]],[T]]],[11,R[87],E,E,46,[[["self"]],[R[89]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[84],E,E,47,[[[U]],[R[4]]]],[11,R[85],E,E,47,[[],[R[4]]]],[11,"into",E,E,47,[[],[U]]],[11,R[88],E,E,47,[[["self"]],[T]]],[11,R[86],E,E,47,[[["self"]],[T]]],[11,R[87],E,E,47,[[["self"]],[R[89]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[84],E,E,48,[[[U]],[R[4]]]],[11,R[85],E,E,48,[[],[R[4]]]],[11,"into",E,E,48,[[],[U]]],[11,R[88],E,E,48,[[["self"]],[T]]],[11,R[86],E,E,48,[[["self"]],[T]]],[11,R[87],E,E,48,[[["self"]],[R[89]]]],[11,"from",R[94],E,88,[[[T]],[T]]],[11,R[84],E,E,88,[[[U]],[R[4]]]],[11,R[85],E,E,88,[[],[R[4]]]],[11,"into",E,E,88,[[],[U]]],[11,R[88],E,E,88,[[["self"]],[T]]],[11,R[86],E,E,88,[[["self"]],[T]]],[11,R[87],E,E,88,[[["self"]],[R[89]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[84],E,E,54,[[[U]],[R[4]]]],[11,R[85],E,E,54,[[],[R[4]]]],[11,"into",E,E,54,[[],[U]]],[11,R[88],E,E,54,[[["self"]],[T]]],[11,R[86],E,E,54,[[["self"]],[T]]],[11,R[87],E,E,54,[[["self"]],[R[89]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[84],E,E,55,[[[U]],[R[4]]]],[11,R[85],E,E,55,[[],[R[4]]]],[11,"into",E,E,55,[[],[U]]],[11,R[88],E,E,55,[[["self"]],[T]]],[11,R[86],E,E,55,[[["self"]],[T]]],[11,R[87],E,E,55,[[["self"]],[R[89]]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[84],E,E,56,[[[U]],[R[4]]]],[11,R[85],E,E,56,[[],[R[4]]]],[11,"into",E,E,56,[[],[U]]],[11,R[88],E,E,56,[[["self"]],[T]]],[11,R[86],E,E,56,[[["self"]],[T]]],[11,R[87],E,E,56,[[["self"]],[R[89]]]],[11,"from",R[95],E,57,[[[T]],[T]]],[11,R[84],E,E,57,[[[U]],[R[4]]]],[11,R[85],E,E,57,[[],[R[4]]]],[11,"into",E,E,57,[[],[U]]],[11,R[88],E,E,57,[[["self"]],[T]]],[11,R[86],E,E,57,[[["self"]],[T]]],[11,R[87],E,E,57,[[["self"]],[R[89]]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[84],E,E,58,[[[U]],[R[4]]]],[11,R[85],E,E,58,[[],[R[4]]]],[11,"into",E,E,58,[[],[U]]],[11,R[88],E,E,58,[[["self"]],[T]]],[11,R[86],E,E,58,[[["self"]],[T]]],[11,R[87],E,E,58,[[["self"]],[R[89]]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[84],E,E,59,[[[U]],[R[4]]]],[11,R[85],E,E,59,[[],[R[4]]]],[11,"into",E,E,59,[[],[U]]],[11,R[88],E,E,59,[[["self"]],[T]]],[11,R[86],E,E,59,[[["self"]],[T]]],[11,R[87],E,E,59,[[["self"]],[R[89]]]],[11,"from",R[96],E,66,[[[T]],[T]]],[11,R[84],E,E,66,[[[U]],[R[4]]]],[11,R[85],E,E,66,[[],[R[4]]]],[11,"into",E,E,66,[[],[U]]],[11,R[88],E,E,66,[[["self"]],[T]]],[11,R[86],E,E,66,[[["self"]],[T]]],[11,R[87],E,E,66,[[["self"]],[R[89]]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[84],E,E,67,[[[U]],[R[4]]]],[11,R[85],E,E,67,[[],[R[4]]]],[11,"into",E,E,67,[[],[U]]],[11,R[88],E,E,67,[[["self"]],[T]]],[11,R[86],E,E,67,[[["self"]],[T]]],[11,R[87],E,E,67,[[["self"]],[R[89]]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[84],E,E,68,[[[U]],[R[4]]]],[11,R[85],E,E,68,[[],[R[4]]]],[11,"into",E,E,68,[[],[U]]],[11,R[88],E,E,68,[[["self"]],[T]]],[11,R[86],E,E,68,[[["self"]],[T]]],[11,R[87],E,E,68,[[["self"]],[R[89]]]],[11,"from",R[97],E,89,[[[T]],[T]]],[11,R[84],E,E,89,[[[U]],[R[4]]]],[11,R[85],E,E,89,[[],[R[4]]]],[11,"into",E,E,89,[[],[U]]],[11,R[88],E,E,89,[[["self"]],[T]]],[11,R[86],E,E,89,[[["self"]],[T]]],[11,R[87],E,E,89,[[["self"]],[R[89]]]],[11,"from",E,E,90,[[[T]],[T]]],[11,R[84],E,E,90,[[[U]],[R[4]]]],[11,R[85],E,E,90,[[],[R[4]]]],[11,"into",E,E,90,[[],[U]]],[11,R[88],E,E,90,[[["self"]],[T]]],[11,R[86],E,E,90,[[["self"]],[T]]],[11,R[87],E,E,90,[[["self"]],[R[89]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[84],E,E,72,[[[U]],[R[4]]]],[11,R[85],E,E,72,[[],[R[4]]]],[11,"into",E,E,72,[[],[U]]],[11,R[88],E,E,72,[[["self"]],[T]]],[11,R[86],E,E,72,[[["self"]],[T]]],[11,R[87],E,E,72,[[["self"]],[R[89]]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[84],E,E,73,[[[U]],[R[4]]]],[11,R[85],E,E,73,[[],[R[4]]]],[11,"into",E,E,73,[[],[U]]],[11,R[88],E,E,73,[[["self"]],[T]]],[11,R[86],E,E,73,[[["self"]],[T]]],[11,R[87],E,E,73,[[["self"]],[R[89]]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[84],E,E,74,[[[U]],[R[4]]]],[11,R[85],E,E,74,[[],[R[4]]]],[11,"into",E,E,74,[[],[U]]],[11,R[88],E,E,74,[[["self"]],[T]]],[11,R[86],E,E,74,[[["self"]],[T]]],[11,R[87],E,E,74,[[["self"]],[R[89]]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[84],E,E,69,[[[U]],[R[4]]]],[11,R[85],E,E,69,[[],[R[4]]]],[11,"into",E,E,69,[[],[U]]],[11,R[88],E,E,69,[[["self"]],[T]]],[11,R[86],E,E,69,[[["self"]],[T]]],[11,R[87],E,E,69,[[["self"]],[R[89]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[84],E,E,70,[[[U]],[R[4]]]],[11,R[85],E,E,70,[[],[R[4]]]],[11,"into",E,E,70,[[],[U]]],[11,R[88],E,E,70,[[["self"]],[T]]],[11,R[86],E,E,70,[[["self"]],[T]]],[11,R[87],E,E,70,[[["self"]],[R[89]]]],[11,"from",R[98],E,76,[[[T]],[T]]],[11,R[84],E,E,76,[[[U]],[R[4]]]],[11,R[85],E,E,76,[[],[R[4]]]],[11,"into",E,E,76,[[],[U]]],[11,R[88],E,E,76,[[["self"]],[T]]],[11,R[86],E,E,76,[[["self"]],[T]]],[11,R[87],E,E,76,[[["self"]],[R[89]]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[84],E,E,77,[[[U]],[R[4]]]],[11,R[85],E,E,77,[[],[R[4]]]],[11,"into",E,E,77,[[],[U]]],[11,R[88],E,E,77,[[["self"]],[T]]],[11,R[86],E,E,77,[[["self"]],[T]]],[11,R[87],E,E,77,[[["self"]],[R[89]]]],[11,"from",R[99],E,91,[[[T]],[T]]],[11,R[84],E,E,91,[[[U]],[R[4]]]],[11,R[85],E,E,91,[[],[R[4]]]],[11,"into",E,E,91,[[],[U]]],[11,R[88],E,E,91,[[["self"]],[T]]],[11,R[86],E,E,91,[[["self"]],[T]]],[11,R[87],E,E,91,[[["self"]],[R[89]]]],[11,"from",E,E,78,[[[T]],[T]]],[11,R[84],E,E,78,[[[U]],[R[4]]]],[11,R[85],E,E,78,[[],[R[4]]]],[11,"into",E,E,78,[[],[U]]],[11,R[88],E,E,78,[[["self"]],[T]]],[11,R[86],E,E,78,[[["self"]],[T]]],[11,R[87],E,E,78,[[["self"]],[R[89]]]],[11,"from",E,E,79,[[[T]],[T]]],[11,R[84],E,E,79,[[[U]],[R[4]]]],[11,R[85],E,E,79,[[],[R[4]]]],[11,"into",E,E,79,[[],[U]]],[11,R[88],E,E,79,[[["self"]],[T]]],[11,R[86],E,E,79,[[["self"]],[T]]],[11,R[87],E,E,79,[[["self"]],[R[89]]]],[11,"from",E,E,80,[[[T]],[T]]],[11,R[84],E,E,80,[[[U]],[R[4]]]],[11,R[85],E,E,80,[[],[R[4]]]],[11,"into",E,E,80,[[],[U]]],[11,R[88],E,E,80,[[["self"]],[T]]],[11,R[86],E,E,80,[[["self"]],[T]]],[11,R[87],E,E,80,[[["self"]],[R[89]]]],[11,"fmt",E,E,91,[[[R[100]],["self"]],[[R[5]],[R[4],[R[5]]]]]],[11,R[115],E,E,91,[[["self"],["uuid"]],[[R[28],[R[101]]],[R[101]]]]],[11,"lt",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,"le",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,"gt",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,"ge",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,"fmt",E,E,91,[[[R[100]],["self"]],[[R[5]],[R[4],[R[5]]]]]],[11,"clone",E,E,91,[[["self"]],["uuid"]]],[11,"cmp",E,E,91,[[["self"],["uuid"]],[R[101]]]],[11,"fmt",E,E,91,[[[R[100]],["self"]],[[R[5]],[R[4],[R[5]]]]]],[11,"fmt",E,E,91,[[[R[100]],["self"]],[[R[5]],[R[4],[R[5]]]]]],[11,"from_str",E,E,91,[[["str"]],[["uuid"],[R[4],["uuid"]]]]],[11,"hash",E,E,91,[[["self"],["__h"]]]],[11,"default",E,E,91,[[],["uuid"]]],[11,"eq",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,"ne",E,E,91,[[["self"],["uuid"]],["bool"]]],[11,R[102],R[83],E,83,[[["self"]]]],[11,R[102],R[92],E,21,[[["self"]]]],[11,R[104],R[83],E,2,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,85,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,86,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[91],E,16,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[93],E,25,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[15],"Lowers this AD structure into a Byte buffer.",34,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,35,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[19],E,42,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[37],E,45,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,46,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[13],E,52,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],R[99],E,78,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,79,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[104],E,E,91,[[["self"],[R[103]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[83],E,8,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,2,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,85,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,86,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[91],E,16,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,16,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[93],E,25,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[15],E,34,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,35,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[19],E,37,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,40,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,42,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[37],E,46,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[13],E,52,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],R[99],E,78,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,79,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[105],E,E,91,[[[R[27]]],[[R[4],[R[5]]],[R[5]]]]],[11,"lookup",R[93],E,27,[[["self"],[R[12]]],[[R[10]],[R[28],[R[10]]]]]],[11,R[106],R[83],E,10,[[["self"],[R[107]]],[[R[4],[R[5]]],[R[5]]]]],[11,R[106],R[97],E,72,[[["self"],[R[107]]],[[R[4],[R[5]]],[R[5]]]]],[11,"matches",R[94],E,88,[[["self"],[R[2]]],["bool"]]],[11,"matches",E,E,54,[[["self"],[R[2]]],["bool"]]],[11,R[108],R[13],E,64,[[["self"]]]],[11,R[109],E,E,64,[[[R[110]],["self"],[R[51]]]]],[11,R[111],E,E,64,[[["u32"],[R[80]],["self"],[R[51]]]]],[11,"clone",R[83],E,8,[[["self"]],["atthandle"]]],[11,"clone",E,E,2,[[["self"]],["attuuid"]]],[11,"clone",E,E,7,[[["self"]],["errorcode"]]],[11,"clone",E,E,86,[[["self"]],["bygroupattdata"]]],[11,"clone",R[91],E,16,[[["self"]],["self"]]],[11,"clone",R[93],E,25,[[["self"]],[R[12]]]],[11,"clone",R[15],E,34,[[["self"]],["adstructure"]]],[11,"clone",E,E,35,[[["self"]],["serviceuuids"]]],[11,"clone",E,E,36,[[["self"]],["flags"]]],[11,"clone",R[19],E,37,[[["self"]],["pdu"]]],[11,"clone",E,E,40,[[["self"]],["connectrequestdata"]]],[11,"clone",E,E,38,[[["self"]],["sleepclockaccuracy"]]],[11,"clone",E,E,42,[[["self"]],[R[51]]]],[11,"clone",R[13],E,43,[[["self"]],["companyid"]]],[11,"clone",R[37],E,49,[[["self"]],[R[51]]]],[11,"clone",E,E,44,[[["self"]],["llid"]]],[11,"clone",E,E,50,[[["self"]],["connectionupdatedata"]]],[11,"clone",E,E,46,[[["self"]],[R[132]]]],[11,"clone",E,E,47,[[["self"]],[R[112]]]],[11,"clone",E,E,48,[[["self"]],[R[114]]]],[11,"clone",R[13],E,31,[[["self"]],[R[54]]]],[11,"clone",E,E,51,[[["self"]],[R[2]]]],[11,"clone",E,E,52,[[["self"]],[R[57]]]],[11,"clone",E,E,30,[[["self"]],["cmd"]]],[11,"clone",E,E,32,[[["self"]],[R[74]]]],[11,"clone",E,E,33,[[["self"]],["radiocmd"]]],[11,"clone",R[96],E,66,[[["self"]],[R[110]]]],[11,"clone",E,E,67,[[["self"]],[R[80]]]],[11,"clone",E,E,68,[[["self"]],[R[113]]]],[11,"clone",R[97],E,69,[[["self"]],["iocapabilities"]]],[11,"clone",E,E,73,[[["self"]],["authreq"]]],[11,"clone",E,E,70,[[["self"]],[R[81]]]],[11,"clone",E,E,74,[[["self"]],[R[82]]]],[11,"clone",R[98],E,76,[[["self"]],[R[31]]]],[11,"clone",E,E,77,[[["self"]],[R[3]]]],[11,"clone",R[99],E,78,[[["self"]],["uuid16"]]],[11,"clone",E,E,79,[[["self"]],["uuid32"]]],[11,"fmt",R[0],E,0,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[96],E,68,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[98],E,76,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,77,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[83],E,8,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,2,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,7,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,84,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,85,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,86,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[91],E,16,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,16,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[0],E,0,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[93],E,25,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[15],E,34,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,35,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,36,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[19],E,37,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,40,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,38,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,41,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,42,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,39,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,43,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[37],E,49,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,44,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,45,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,50,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,46,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,47,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,48,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,31,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,51,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,52,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,30,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,32,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,33,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[96],E,66,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,67,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,68,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[97],E,69,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,73,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,70,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,74,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[98],E,76,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,77,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[99],E,78,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",E,E,79,[[[R[100]],["self"]],[R[4]]]],[11,"eq",R[83],E,2,[[["self"]],["bool"]]],[11,"eq",R[93],E,25,[[[R[12]],["self"]],["bool"]]],[11,"ne",E,E,25,[[[R[12]],["self"]],["bool"]]],[11,"eq",R[15],E,36,[[["self"],["flags"]],["bool"]]],[11,"ne",E,E,36,[[["self"],["flags"]],["bool"]]],[11,"eq",R[19],E,39,[[[R[33]],["self"]],["bool"]]],[11,"ne",E,E,39,[[[R[33]],["self"]],["bool"]]],[11,"eq",R[37],E,44,[[["self"],["llid"]],["bool"]]],[11,"eq",E,E,47,[[[R[112]],["self"]],["bool"]]],[11,"ne",E,E,47,[[[R[112]],["self"]],["bool"]]],[11,"eq",E,E,48,[[[R[114]],["self"]],["bool"]]],[11,"ne",E,E,48,[[[R[114]],["self"]],["bool"]]],[11,"eq",R[13],E,31,[[[R[54]],["self"]],["bool"]]],[11,"eq",E,E,51,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,51,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,"ne",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,"eq",R[96],E,68,[[[R[113]],["self"]],["bool"]]],[11,"ne",E,E,68,[[[R[113]],["self"]],["bool"]]],[11,"eq",R[97],E,74,[[[R[82]],["self"]],["bool"]]],[11,"ne",E,E,74,[[[R[82]],["self"]],["bool"]]],[11,"eq",R[98],E,76,[[[R[31]],["self"]],["bool"]]],[11,"ne",E,E,76,[[[R[31]],["self"]],["bool"]]],[11,"eq",R[99],E,78,[[["uuid16"],["self"]],["bool"]]],[11,"ne",E,E,78,[[["uuid16"],["self"]],["bool"]]],[11,"eq",E,E,79,[[["uuid32"],["self"]],["bool"]]],[11,"ne",E,E,79,[[["uuid32"],["self"]],["bool"]]],[11,"cmp",R[15],E,36,[[["self"],["flags"]],[R[101]]]],[11,"cmp",R[13],E,52,[[[R[57]],["self"]],[R[101]]]],[11,"cmp",R[97],E,74,[[[R[82]],["self"]],[R[101]]]],[11,"cmp",R[98],E,76,[[[R[31]],["self"]],[R[101]]]],[11,R[115],R[15],E,36,[[["self"],["flags"]],[[R[101]],[R[28],[R[101]]]]]],[11,"lt",E,E,36,[[["self"],["flags"]],["bool"]]],[11,"le",E,E,36,[[["self"],["flags"]],["bool"]]],[11,"gt",E,E,36,[[["self"],["flags"]],["bool"]]],[11,"ge",E,E,36,[[["self"],["flags"]],["bool"]]],[11,R[115],R[13],E,52,[[[R[57]],["self"]],[[R[101]],[R[28],[R[101]]]]]],[11,"lt",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,"le",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,"gt",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,"ge",E,E,52,[[[R[57]],["self"]],["bool"]]],[11,R[115],R[97],E,74,[[[R[82]],["self"]],[[R[101]],[R[28],[R[101]]]]]],[11,"lt",E,E,74,[[[R[82]],["self"]],["bool"]]],[11,"le",E,E,74,[[[R[82]],["self"]],["bool"]]],[11,"gt",E,E,74,[[[R[82]],["self"]],["bool"]]],[11,"ge",E,E,74,[[[R[82]],["self"]],["bool"]]],[11,R[115],R[98],E,76,[[[R[31]],["self"]],[[R[101]],[R[28],[R[101]]]]]],[11,"lt",E,E,76,[[[R[31]],["self"]],["bool"]]],[11,"le",E,E,76,[[[R[31]],["self"]],["bool"]]],[11,"gt",E,E,76,[[[R[31]],["self"]],["bool"]]],[11,"ge",E,E,76,[[[R[31]],["self"]],["bool"]]],[11,"hash",R[93],E,25,[[["self"],["__h"]]]],[11,"hash",R[15],E,36,[[["self"],["__h"]]]],[11,"hash",R[13],E,52,[[["self"],["__h"]]]],[11,"hash",R[97],E,74,[[["self"],["__h"]]]],[11,"add",R[98],E,76,[[],["self"]]],[11,"add",E,E,76,[[["self"]],["self"]]],[11,"add",E,E,77,[[[R[31]]],["self"]]],[11,"sub",R[15],R[116],36,[[["flags"]],["flags"]]],[11,"sub",R[13],R[116],52,[[[R[57]]],[R[57]]]],[11,"sub",R[97],R[116],74,[[[R[82]]],[R[82]]]],[11,"sub",R[98],E,76,[[],["self"]]],[11,"sub",E,E,76,[[["self"]],["self"]]],[11,"sub",E,E,77,[[],[R[31]]]],[11,"sub",E,E,77,[[[R[31]]],["self"]]],[11,R[117],E,E,76,[[["self"]]]],[11,R[117],E,E,77,[[["self"],[R[31]]]]],[11,R[118],R[15],R[119],36,[[["self"],["flags"]]]],[11,R[118],R[13],R[119],52,[[["self"],[R[57]]]]],[11,R[118],R[97],R[119],74,[[["self"],[R[82]]]]],[11,R[118],R[98],E,76,[[["self"]]]],[11,R[118],E,E,77,[[["self"],[R[31]]]]],[11,"not",R[15],R[120],36,[[],["flags"]]],[11,"not",R[13],R[120],52,[[],[R[57]]]],[11,"not",R[97],R[120],74,[[],[R[82]]]],[11,"bitand",R[15],R[121],36,[[["flags"]],["flags"]]],[11,"bitand",R[13],R[121],52,[[[R[57]]],[R[57]]]],[11,"bitand",R[97],R[121],74,[[[R[82]]],[R[82]]]],[11,"bitor",R[15],R[122],36,[[["flags"]],["flags"]]],[11,"bitor",R[13],R[122],52,[[[R[57]]],[R[57]]]],[11,"bitor",R[97],R[122],74,[[[R[82]]],[R[82]]]],[11,"bitxor",R[15],R[123],36,[[["flags"]],["flags"]]],[11,"bitxor",R[13],R[123],52,[[[R[57]]],[R[57]]]],[11,"bitxor",R[97],R[123],74,[[[R[82]]],[R[82]]]],[11,R[124],R[15],R[125],36,[[["self"],["flags"]]]],[11,R[124],R[13],R[125],52,[[["self"],[R[57]]]]],[11,R[124],R[97],R[125],74,[[["self"],[R[82]]]]],[11,R[126],R[15],R[127],36,[[["self"],["flags"]]]],[11,R[126],R[13],R[127],52,[[["self"],[R[57]]]]],[11,R[126],R[97],R[127],74,[[["self"],[R[82]]]]],[11,R[128],R[15],R[129],36,[[["self"],["flags"]]]],[11,R[128],R[13],R[129],52,[[["self"],[R[57]]]]],[11,R[128],R[97],R[129],74,[[["self"],[R[82]]]]],[11,R[130],R[15],E,36,[[[R[131]]],["flags"]]],[11,R[130],R[13],E,52,[[[R[131]]],[R[57]]]],[11,R[130],R[97],E,74,[[[R[131]]],[R[82]]]],[11,"extend",R[15],E,36,[[["self"],[R[131]]]]],[11,"extend",R[13],E,52,[[["self"],[R[131]]]]],[11,"extend",R[97],E,74,[[[R[131]],["self"]]]],[11,"from",R[83],E,2,[[["uuid16"]],["self"]]],[11,"from",E,E,2,[[["uuid32"]],["self"]]],[11,"from",E,E,2,[[["uuid"]],["self"]]],[11,"from",E,E,7,[[["u8"]],["self"]]],[11,"from",R[91],E,16,[[[T]],["self"]]],[11,"from",R[15],E,34,[[["flags"]],["self"]]],[11,"from",R[19],E,39,[[["u8"]],["self"]]],[11,"from",R[37],E,45,[[[R[132]]],["self"]]],[11,"from",E,E,47,[[["u8"]],["self"]]],[11,"from",E,E,48,[[["u8"]],["self"]]],[11,"from",R[97],E,69,[[["u8"]],["self"]]],[11,"from",E,E,70,[[["u8"]],["self"]]],[11,"from",R[99],E,79,[[["uuid16"]],["self"]]],[11,"fmt",R[15],E,36,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,52,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[97],E,74,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[15],E,36,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,52,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[97],E,74,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[15],E,36,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,52,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[97],E,74,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[15],E,36,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[13],E,52,[[[R[100]],["self"]],[R[4]]]],[11,"fmt",R[97],E,74,[[[R[100]],["self"]],[R[4]]]],[11,"default",R[83],E,82,[[],["self"]]],[11,"into",E,E,2,[[],["uuid"]]],[11,"into",R[99],E,78,[[],["uuid"]]],[11,"into",E,E,79,[[],["uuid"]]],[11,"to_hyphenated",E,"Creates a [`Hyphenated`] instance from a [`Uuid`].",91,[[],["hyphenated"]]],[11,"to_hyphenated_ref",E,"Creates a [`HyphenatedRef`] instance from a [`Uuid`]…",91,[[["self"]],["hyphenatedref"]]],[11,"to_simple",E,"Creates a [`Simple`] instance from a [`Uuid`].",91,[[],["simple"]]],[11,"to_simple_ref",E,"Creates a [`SimpleRef`] instance from a [`Uuid`] reference.",91,[[["self"]],["simpleref"]]],[11,"to_urn",E,"Creates a [`Urn`] instance from a [`Uuid`].",91,[[],["urn"]]],[11,"to_urn_ref",E,"Creates a [`UrnRef`] instance from a [`Uuid`] reference.",91,[[["self"]],["urnref"]]],[18,"NAMESPACE_DNS",E,"[`Uuid`] namespace for Domain Name System (DNS).",91,N],[18,"NAMESPACE_OID",E,"[`Uuid`] namespace for ISO Object Identifiers (OIDs).",91,N],[18,"NAMESPACE_URL",E,"[`Uuid`] namespace for Uniform Resource Locators (URLs).",91,N],[18,"NAMESPACE_X500",E,"[`Uuid`] namespace for X.500 Distinguished Names (DNs).",91,N],[11,"nil",E,"The 'nil UUID'.",91,[[],["uuid"]]],[11,"from_fields",E,"Creates a `Uuid` from four field values in big-endian order.",91,[[["u32"],["u16"]],[["uuid"],[R[133]],[R[4],["uuid",R[133]]]]]],[11,"from_fields_le",E,"Creates a `Uuid` from four field values in little-endian…",91,[[["u32"],["u16"]],[["uuid"],[R[133]],[R[4],["uuid",R[133]]]]]],[11,R[134],E,R[135],91,[[],[["uuid"],[R[133]],[R[4],["uuid",R[133]]]]]],[11,R[105],E,R[135],91,[[],["uuid"]]],[11,"from_random_bytes",E,"Creates a v4 Uuid from random bytes (e.g. bytes supplied…",91,[[],["uuid"]]],[11,"get_variant",E,"Returns the variant of the `Uuid` structure.",91,[[["self"]],[["variant"],[R[28],["variant"]]]]],[11,"get_version_num",E,"Returns the version number of the `Uuid`.",91,[[["self"]],[R[8]]]],[11,"get_version",E,"Returns the version of the `Uuid`.",91,[[["self"]],[[R[28],["version"]],["version"]]]],[11,"as_fields",E,"Returns the four field values of the UUID in big-endian…",91,[[["self"]]]],[11,"to_fields_le",E,"Returns the four field values of the UUID in little-endian…",91,[[["self"]]]],[11,"as_bytes",E,"Returns an array of 16 octets containing the UUID data.…",91,[[["self"]]]],[11,"to_timestamp",E,"Returns an Optional Tuple of (u64, u16) representing the…",91,[[["self"]],[R[28]]]],[11,"parse_str",E,"Parses a `Uuid` from a string of hexadecimal digits with…",91,[[["str"]],[["uuid"],[R[136]],[R[4],["uuid",R[136]]]]]],[11,"is_nil",E,"Tests if the UUID is nil",91,[[["self"]],["bool"]]],[11,"encode_buffer",E,"A buffer that can be used for `encode_...` calls, that is…",91,[[]]]],"p":[[4,"Error"],[3,R[137]],[4,"AttUuid"],[4,R[138]],[4,R[139]],[4,R[140]],[4,R[141]],[4,R[142]],[3,R[143]],[8,R[144]],[3,R[145]],[8,R[146]],[3,"Beacon"],[3,R[147]],[8,"ToBytes"],[8,R[148]],[3,"BytesOr"],[3,R[149]],[3,R[150]],[4,R[151]],[3,"Service"],[3,R[152]],[8,R[153]],[8,R[154]],[8,"Protocol"],[3,"Channel"],[3,R[155]],[3,R[156]],[3,R[157]],[3,R[158]],[3,"Cmd"],[4,R[159]],[4,R[160]],[4,"RadioCmd"],[4,R[161]],[3,R[162]],[3,"Flags"],[4,"Pdu"],[4,R[163]],[4,"PduType"],[3,R[164]],[3,"PduBuf"],[3,"Header"],[3,R[165]],[4,"Llid"],[4,"Pdu"],[4,R[166]],[4,R[167]],[4,R[168]],[3,"Header"],[3,R[169]],[3,R[170]],[3,R[171]],[8,R[172]],[3,R[173]],[3,R[174]],[3,R[175]],[3,"Producer"],[3,"Consumer"],[3,"Consume"],[3,R[176]],[8,R[177]],[8,R[178]],[3,R[179]],[3,R[180]],[8,"Radio"],[3,R[181]],[3,R[182]],[3,R[183]],[4,R[184]],[4,R[185]],[8,R[186]],[3,R[187]],[3,"AuthReq"],[3,R[188]],[8,"Timer"],[3,"Duration"],[3,"Instant"],[3,"Uuid16"],[3,"Uuid32"],[4,"UuidKind"],[8,"IsUuid"],[3,R[189]],[3,R[190]],[3,"AttError"],[3,R[191]],[3,R[192]],[3,R[193]],[3,"AllowAll"],[3,R[194]],[3,R[195]],[3,"Uuid"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);